// Code generated by MockGen. DO NOT EDIT.
// Source: course_repository.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"
	course "skillForce/internal/models/course"
	dto "skillForce/internal/models/dto"
	user "skillForce/internal/models/user"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseRepository is a mock of CourseRepository interface.
type MockCourseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseRepositoryMockRecorder
}

// MockCourseRepositoryMockRecorder is the mock recorder for MockCourseRepository.
type MockCourseRepositoryMockRecorder struct {
	mock *MockCourseRepository
}

// NewMockCourseRepository creates a new mock instance.
func NewMockCourseRepository(ctrl *gomock.Controller) *MockCourseRepository {
	mock := &MockCourseRepository{ctrl: ctrl}
	mock.recorder = &MockCourseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseRepository) EXPECT() *MockCourseRepositoryMockRecorder {
	return m.recorder
}

// AddCourseToFavourites mocks base method.
func (m *MockCourseRepository) AddCourseToFavourites(ctx context.Context, courseId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCourseToFavourites", ctx, courseId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCourseToFavourites indicates an expected call of AddCourseToFavourites.
func (mr *MockCourseRepositoryMockRecorder) AddCourseToFavourites(ctx, courseId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCourseToFavourites", reflect.TypeOf((*MockCourseRepository)(nil).AddCourseToFavourites), ctx, courseId, userId)
}

// AddUserToCourse mocks base method.
func (m *MockCourseRepository) AddUserToCourse(ctx context.Context, userId, courseId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToCourse", ctx, userId, courseId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToCourse indicates an expected call of AddUserToCourse.
func (mr *MockCourseRepositoryMockRecorder) AddUserToCourse(ctx, userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToCourse", reflect.TypeOf((*MockCourseRepository)(nil).AddUserToCourse), ctx, userId, courseId)
}

// AnswerQuestion mocks base method.
func (m *MockCourseRepository) AnswerQuestion(ctx context.Context, question_id, user_id int, answer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerQuestion", ctx, question_id, user_id, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnswerQuestion indicates an expected call of AnswerQuestion.
func (mr *MockCourseRepositoryMockRecorder) AnswerQuestion(ctx, question_id, user_id, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerQuestion", reflect.TypeOf((*MockCourseRepository)(nil).AnswerQuestion), ctx, question_id, user_id, answer)
}

// AnswerQuiz mocks base method.
func (m *MockCourseRepository) AnswerQuiz(ctx context.Context, question_id, answer_id, user_id, course_id int) (*dto.QuizResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerQuiz", ctx, question_id, answer_id, user_id, course_id)
	ret0, _ := ret[0].(*dto.QuizResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerQuiz indicates an expected call of AnswerQuiz.
func (mr *MockCourseRepositoryMockRecorder) AnswerQuiz(ctx, question_id, answer_id, user_id, course_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerQuiz", reflect.TypeOf((*MockCourseRepository)(nil).AnswerQuiz), ctx, question_id, answer_id, user_id, course_id)
}

// CreateBucket mocks base method.
func (m *MockCourseRepository) CreateBucket(ctx context.Context, bucket *course.LessonBucket, partId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", ctx, bucket, partId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockCourseRepositoryMockRecorder) CreateBucket(ctx, bucket, partId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockCourseRepository)(nil).CreateBucket), ctx, bucket, partId)
}

// CreateCourse mocks base method.
func (m *MockCourseRepository) CreateCourse(ctx context.Context, course *course.Course, userProfile *user.UserProfile) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", ctx, course, userProfile)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockCourseRepositoryMockRecorder) CreateCourse(ctx, course, userProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockCourseRepository)(nil).CreateCourse), ctx, course, userProfile)
}

// CreatePart mocks base method.
func (m *MockCourseRepository) CreatePart(ctx context.Context, part *course.CoursePart, courseId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePart", ctx, part, courseId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePart indicates an expected call of CreatePart.
func (mr *MockCourseRepositoryMockRecorder) CreatePart(ctx, part, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePart", reflect.TypeOf((*MockCourseRepository)(nil).CreatePart), ctx, part, courseId)
}

// CreateTextLesson mocks base method.
func (m *MockCourseRepository) CreateTextLesson(ctx context.Context, lesson *course.LessonPoint, bucketId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTextLesson", ctx, lesson, bucketId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTextLesson indicates an expected call of CreateTextLesson.
func (mr *MockCourseRepositoryMockRecorder) CreateTextLesson(ctx, lesson, bucketId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTextLesson", reflect.TypeOf((*MockCourseRepository)(nil).CreateTextLesson), ctx, lesson, bucketId)
}

// CreateVideoLesson mocks base method.
func (m *MockCourseRepository) CreateVideoLesson(ctx context.Context, lesson *course.LessonPoint, bucketId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideoLesson", ctx, lesson, bucketId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVideoLesson indicates an expected call of CreateVideoLesson.
func (mr *MockCourseRepositoryMockRecorder) CreateVideoLesson(ctx, lesson, bucketId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideoLesson", reflect.TypeOf((*MockCourseRepository)(nil).CreateVideoLesson), ctx, lesson, bucketId)
}

// DeleteCourseFromFavourites mocks base method.
func (m *MockCourseRepository) DeleteCourseFromFavourites(ctx context.Context, courseId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseFromFavourites", ctx, courseId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseFromFavourites indicates an expected call of DeleteCourseFromFavourites.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseFromFavourites(ctx, courseId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseFromFavourites", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseFromFavourites), ctx, courseId, userId)
}

// GetBucketByLessonId mocks base method.
func (m *MockCourseRepository) GetBucketByLessonId(ctx context.Context, lessonId int) (*course.LessonBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketByLessonId", ctx, lessonId)
	ret0, _ := ret[0].(*course.LessonBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketByLessonId indicates an expected call of GetBucketByLessonId.
func (mr *MockCourseRepositoryMockRecorder) GetBucketByLessonId(ctx, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketByLessonId", reflect.TypeOf((*MockCourseRepository)(nil).GetBucketByLessonId), ctx, lessonId)
}

// GetBucketCourses mocks base method.
func (m *MockCourseRepository) GetBucketCourses(ctx context.Context) ([]*course.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketCourses", ctx)
	ret0, _ := ret[0].([]*course.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketCourses indicates an expected call of GetBucketCourses.
func (mr *MockCourseRepositoryMockRecorder) GetBucketCourses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketCourses", reflect.TypeOf((*MockCourseRepository)(nil).GetBucketCourses), ctx)
}

// GetBucketLessons mocks base method.
func (m *MockCourseRepository) GetBucketLessons(ctx context.Context, userId, courseId, bucketId int) ([]*course.LessonPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLessons", ctx, userId, courseId, bucketId)
	ret0, _ := ret[0].([]*course.LessonPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLessons indicates an expected call of GetBucketLessons.
func (mr *MockCourseRepositoryMockRecorder) GetBucketLessons(ctx, userId, courseId, bucketId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLessons", reflect.TypeOf((*MockCourseRepository)(nil).GetBucketLessons), ctx, userId, courseId, bucketId)
}

// GetCourseById mocks base method.
func (m *MockCourseRepository) GetCourseById(ctx context.Context, courseId int) (*course.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseById", ctx, courseId)
	ret0, _ := ret[0].(*course.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseById indicates an expected call of GetCourseById.
func (mr *MockCourseRepositoryMockRecorder) GetCourseById(ctx, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseById", reflect.TypeOf((*MockCourseRepository)(nil).GetCourseById), ctx, courseId)
}

// GetCourseParts mocks base method.
func (m *MockCourseRepository) GetCourseParts(ctx context.Context, courseId int) ([]*course.CoursePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseParts", ctx, courseId)
	ret0, _ := ret[0].([]*course.CoursePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseParts indicates an expected call of GetCourseParts.
func (mr *MockCourseRepositoryMockRecorder) GetCourseParts(ctx, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseParts", reflect.TypeOf((*MockCourseRepository)(nil).GetCourseParts), ctx, courseId)
}

// GetCoursesFavouriteStatus mocks base method.
func (m *MockCourseRepository) GetCoursesFavouriteStatus(ctx context.Context, bucketCourses []*course.Course, userId int) (map[int]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesFavouriteStatus", ctx, bucketCourses, userId)
	ret0, _ := ret[0].(map[int]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesFavouriteStatus indicates an expected call of GetCoursesFavouriteStatus.
func (mr *MockCourseRepositoryMockRecorder) GetCoursesFavouriteStatus(ctx, bucketCourses, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesFavouriteStatus", reflect.TypeOf((*MockCourseRepository)(nil).GetCoursesFavouriteStatus), ctx, bucketCourses, userId)
}

// GetCoursesPurchases mocks base method.
func (m *MockCourseRepository) GetCoursesPurchases(ctx context.Context, bucketCoursesWithoutPurchases []*course.Course) (map[int]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesPurchases", ctx, bucketCoursesWithoutPurchases)
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesPurchases indicates an expected call of GetCoursesPurchases.
func (mr *MockCourseRepositoryMockRecorder) GetCoursesPurchases(ctx, bucketCoursesWithoutPurchases interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesPurchases", reflect.TypeOf((*MockCourseRepository)(nil).GetCoursesPurchases), ctx, bucketCoursesWithoutPurchases)
}

// GetCoursesRaitings mocks base method.
func (m *MockCourseRepository) GetCoursesRaitings(ctx context.Context, bucketCoursesWithoutRating []*course.Course) (map[int]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesRaitings", ctx, bucketCoursesWithoutRating)
	ret0, _ := ret[0].(map[int]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesRaitings indicates an expected call of GetCoursesRaitings.
func (mr *MockCourseRepositoryMockRecorder) GetCoursesRaitings(ctx, bucketCoursesWithoutRating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesRaitings", reflect.TypeOf((*MockCourseRepository)(nil).GetCoursesRaitings), ctx, bucketCoursesWithoutRating)
}

// GetCoursesTags mocks base method.
func (m *MockCourseRepository) GetCoursesTags(ctx context.Context, bucketCoursesWithoutTags []*course.Course) (map[int][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoursesTags", ctx, bucketCoursesWithoutTags)
	ret0, _ := ret[0].(map[int][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoursesTags indicates an expected call of GetCoursesTags.
func (mr *MockCourseRepositoryMockRecorder) GetCoursesTags(ctx, bucketCoursesWithoutTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoursesTags", reflect.TypeOf((*MockCourseRepository)(nil).GetCoursesTags), ctx, bucketCoursesWithoutTags)
}

// GetFavouriteCourses mocks base method.
func (m *MockCourseRepository) GetFavouriteCourses(ctx context.Context, userId int) ([]*course.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavouriteCourses", ctx, userId)
	ret0, _ := ret[0].([]*course.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavouriteCourses indicates an expected call of GetFavouriteCourses.
func (mr *MockCourseRepositoryMockRecorder) GetFavouriteCourses(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavouriteCourses", reflect.TypeOf((*MockCourseRepository)(nil).GetFavouriteCourses), ctx, userId)
}

// GetLastLessonHeader mocks base method.
func (m *MockCourseRepository) GetLastLessonHeader(ctx context.Context, userId, courseId int) (*dto.LessonDtoHeader, int, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastLessonHeader", ctx, userId, courseId)
	ret0, _ := ret[0].(*dto.LessonDtoHeader)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetLastLessonHeader indicates an expected call of GetLastLessonHeader.
func (mr *MockCourseRepositoryMockRecorder) GetLastLessonHeader(ctx, userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastLessonHeader", reflect.TypeOf((*MockCourseRepository)(nil).GetLastLessonHeader), ctx, userId, courseId)
}

// GetLessonBlocks mocks base method.
func (m *MockCourseRepository) GetLessonBlocks(ctx context.Context, currentLessonId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonBlocks", ctx, currentLessonId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonBlocks indicates an expected call of GetLessonBlocks.
func (mr *MockCourseRepositoryMockRecorder) GetLessonBlocks(ctx, currentLessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonBlocks", reflect.TypeOf((*MockCourseRepository)(nil).GetLessonBlocks), ctx, currentLessonId)
}

// GetLessonById mocks base method.
func (m *MockCourseRepository) GetLessonById(ctx context.Context, lessonId int) (*course.LessonPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonById", ctx, lessonId)
	ret0, _ := ret[0].(*course.LessonPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonById indicates an expected call of GetLessonById.
func (mr *MockCourseRepositoryMockRecorder) GetLessonById(ctx, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonById", reflect.TypeOf((*MockCourseRepository)(nil).GetLessonById), ctx, lessonId)
}

// GetLessonFooters mocks base method.
func (m *MockCourseRepository) GetLessonFooters(ctx context.Context, currentLessonId int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonFooters", ctx, currentLessonId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonFooters indicates an expected call of GetLessonFooters.
func (mr *MockCourseRepositoryMockRecorder) GetLessonFooters(ctx, currentLessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonFooters", reflect.TypeOf((*MockCourseRepository)(nil).GetLessonFooters), ctx, currentLessonId)
}

// GetLessonHeaderByLessonId mocks base method.
func (m *MockCourseRepository) GetLessonHeaderByLessonId(ctx context.Context, userId, currentLessonId int) (*dto.LessonDtoHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonHeaderByLessonId", ctx, userId, currentLessonId)
	ret0, _ := ret[0].(*dto.LessonDtoHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonHeaderByLessonId indicates an expected call of GetLessonHeaderByLessonId.
func (mr *MockCourseRepositoryMockRecorder) GetLessonHeaderByLessonId(ctx, userId, currentLessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonHeaderByLessonId", reflect.TypeOf((*MockCourseRepository)(nil).GetLessonHeaderByLessonId), ctx, userId, currentLessonId)
}

// GetLessonTest mocks base method.
func (m *MockCourseRepository) GetLessonTest(ctx context.Context, currentLessonId, user_id int) (*dto.Test, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonTest", ctx, currentLessonId, user_id)
	ret0, _ := ret[0].(*dto.Test)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonTest indicates an expected call of GetLessonTest.
func (mr *MockCourseRepositoryMockRecorder) GetLessonTest(ctx, currentLessonId, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonTest", reflect.TypeOf((*MockCourseRepository)(nil).GetLessonTest), ctx, currentLessonId, user_id)
}

// GetLessonVideo mocks base method.
func (m *MockCourseRepository) GetLessonVideo(ctx context.Context, currentLessonId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonVideo", ctx, currentLessonId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonVideo indicates an expected call of GetLessonVideo.
func (mr *MockCourseRepositoryMockRecorder) GetLessonVideo(ctx, currentLessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonVideo", reflect.TypeOf((*MockCourseRepository)(nil).GetLessonVideo), ctx, currentLessonId)
}

// GetPartBuckets mocks base method.
func (m *MockCourseRepository) GetPartBuckets(ctx context.Context, partId int) ([]*course.LessonBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartBuckets", ctx, partId)
	ret0, _ := ret[0].([]*course.LessonBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartBuckets indicates an expected call of GetPartBuckets.
func (mr *MockCourseRepositoryMockRecorder) GetPartBuckets(ctx, partId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartBuckets", reflect.TypeOf((*MockCourseRepository)(nil).GetPartBuckets), ctx, partId)
}

// GetQuestionTestLesson mocks base method.
func (m *MockCourseRepository) GetQuestionTestLesson(ctx context.Context, currentLessonId, user_id int) (*dto.QuestionTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionTestLesson", ctx, currentLessonId, user_id)
	ret0, _ := ret[0].(*dto.QuestionTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionTestLesson indicates an expected call of GetQuestionTestLesson.
func (mr *MockCourseRepositoryMockRecorder) GetQuestionTestLesson(ctx, currentLessonId, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionTestLesson", reflect.TypeOf((*MockCourseRepository)(nil).GetQuestionTestLesson), ctx, currentLessonId, user_id)
}

// GetUserById mocks base method.
func (m *MockCourseRepository) GetUserById(ctx context.Context, userId int) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userId)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockCourseRepositoryMockRecorder) GetUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockCourseRepository)(nil).GetUserById), ctx, userId)
}

// IsMiddle mocks base method.
func (m *MockCourseRepository) IsMiddle(ctx context.Context, userId, courseId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMiddle", ctx, userId, courseId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMiddle indicates an expected call of IsMiddle.
func (mr *MockCourseRepositoryMockRecorder) IsMiddle(ctx, userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMiddle", reflect.TypeOf((*MockCourseRepository)(nil).IsMiddle), ctx, userId, courseId)
}

// IsUserPurchasedCourse mocks base method.
func (m *MockCourseRepository) IsUserPurchasedCourse(ctx context.Context, userId, courseId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserPurchasedCourse", ctx, userId, courseId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserPurchasedCourse indicates an expected call of IsUserPurchasedCourse.
func (mr *MockCourseRepositoryMockRecorder) IsUserPurchasedCourse(ctx, userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserPurchasedCourse", reflect.TypeOf((*MockCourseRepository)(nil).IsUserPurchasedCourse), ctx, userId, courseId)
}

// MarkLessonAsNotCompleted mocks base method.
func (m *MockCourseRepository) MarkLessonAsNotCompleted(ctx context.Context, userId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkLessonAsNotCompleted", ctx, userId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkLessonAsNotCompleted indicates an expected call of MarkLessonAsNotCompleted.
func (mr *MockCourseRepositoryMockRecorder) MarkLessonAsNotCompleted(ctx, userId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkLessonAsNotCompleted", reflect.TypeOf((*MockCourseRepository)(nil).MarkLessonAsNotCompleted), ctx, userId, lessonId)
}

// MarkLessonCompleted mocks base method.
func (m *MockCourseRepository) MarkLessonCompleted(ctx context.Context, userId, courseId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkLessonCompleted", ctx, userId, courseId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkLessonCompleted indicates an expected call of MarkLessonCompleted.
func (mr *MockCourseRepositoryMockRecorder) MarkLessonCompleted(ctx, userId, courseId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkLessonCompleted", reflect.TypeOf((*MockCourseRepository)(nil).MarkLessonCompleted), ctx, userId, courseId, lessonId)
}

// SearchCoursesByTitle mocks base method.
func (m *MockCourseRepository) SearchCoursesByTitle(ctx context.Context, keywords string) ([]*course.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCoursesByTitle", ctx, keywords)
	ret0, _ := ret[0].([]*course.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCoursesByTitle indicates an expected call of SearchCoursesByTitle.
func (mr *MockCourseRepositoryMockRecorder) SearchCoursesByTitle(ctx, keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCoursesByTitle", reflect.TypeOf((*MockCourseRepository)(nil).SearchCoursesByTitle), ctx, keywords)
}
