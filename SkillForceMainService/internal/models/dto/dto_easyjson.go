// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeSkillForceInternalModelsDto(in *jlexer.Lexer, out *VideoRangeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Start":
			out.Start = int64(in.Int64())
		case "End":
			out.End = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto(out *jwriter.Writer, in VideoRangeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Start\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		out.Int64(int64(in.End))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoRangeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoRangeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoRangeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoRangeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto1(in *jlexer.Lexer, out *VideoMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Size":
			out.Size = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto1(out *jwriter.Writer, in VideoMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto1(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto2(in *jlexer.Lexer, out *UserStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "percentage":
			out.Percentage = int(in.Int())
		case "completed_lessons":
			out.CompletedTextLessons = int(in.Int())
		case "amount_lessons":
			out.AmountTextLessons = int(in.Int())
		case "completed_videos":
			out.CompletedVideoLessons = int(in.Int())
		case "amount_videos":
			out.AmountVideoLessons = int(in.Int())
		case "received_points":
			out.RecievedPoints = int(in.Int())
		case "amount_points":
			out.AmountPoints = int(in.Int())
		case "completed_tests":
			out.CompletedTests = int(in.Int())
		case "amount_tests":
			out.AmountTests = int(in.Int())
		case "completed_questions":
			out.CompletedQuestions = int(in.Int())
		case "amount_questions":
			out.AmountQuestions = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto2(out *jwriter.Writer, in UserStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"percentage\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Percentage))
	}
	{
		const prefix string = ",\"completed_lessons\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedTextLessons))
	}
	{
		const prefix string = ",\"amount_lessons\":"
		out.RawString(prefix)
		out.Int(int(in.AmountTextLessons))
	}
	{
		const prefix string = ",\"completed_videos\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedVideoLessons))
	}
	{
		const prefix string = ",\"amount_videos\":"
		out.RawString(prefix)
		out.Int(int(in.AmountVideoLessons))
	}
	{
		const prefix string = ",\"received_points\":"
		out.RawString(prefix)
		out.Int(int(in.RecievedPoints))
	}
	{
		const prefix string = ",\"amount_points\":"
		out.RawString(prefix)
		out.Int(int(in.AmountPoints))
	}
	{
		const prefix string = ",\"completed_tests\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedTests))
	}
	{
		const prefix string = ",\"amount_tests\":"
		out.RawString(prefix)
		out.Int(int(in.AmountTests))
	}
	{
		const prefix string = ",\"completed_questions\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedQuestions))
	}
	{
		const prefix string = ",\"amount_questions\":"
		out.RawString(prefix)
		out.Int(int(in.AmountQuestions))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto2(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto3(in *jlexer.Lexer, out *UserQuestionAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "answer":
			out.Answer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto3(out *jwriter.Writer, in UserQuestionAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserQuestionAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserQuestionAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserQuestionAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserQuestionAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto3(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto4(in *jlexer.Lexer, out *UserProfileDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "bio":
			out.Bio = string(in.String())
		case "avatar_src":
			out.AvatarSrc = string(in.String())
		case "hide_email":
			out.HideEmail = bool(in.Bool())
		case "is_admin":
			out.IsAdmin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto4(out *jwriter.Writer, in UserProfileDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"avatar_src\":"
		out.RawString(prefix)
		out.String(string(in.AvatarSrc))
	}
	{
		const prefix string = ",\"hide_email\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideEmail))
	}
	{
		const prefix string = ",\"is_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfileDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfileDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfileDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfileDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto4(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto5(in *jlexer.Lexer, out *UserDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto5(out *jwriter.Writer, in UserDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto5(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto6(in *jlexer.Lexer, out *UserAnswerDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "answer":
			out.Answer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto6(out *jwriter.Writer, in UserAnswerDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.Int(int(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAnswerDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAnswerDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAnswerDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAnswerDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto6(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto7(in *jlexer.Lexer, out *UserAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_right":
			out.IsRight = bool(in.Bool())
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "answer_id":
			out.AnswerID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto7(out *jwriter.Writer, in UserAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_right\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsRight))
	}
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"answer_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.AnswerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto7(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto8(in *jlexer.Lexer, out *Test) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "question":
			out.Question = string(in.String())
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]*QuizAnswer, 0, 8)
					} else {
						out.Answers = []*QuizAnswer{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *QuizAnswer
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(QuizAnswer)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Answers = append(out.Answers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_answer":
			(out.UserAnswer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto8(out *jwriter.Writer, in Test) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Answers {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_answer\":"
		out.RawString(prefix)
		(in.UserAnswer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Test) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Test) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Test) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Test) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto8(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto9(in *jlexer.Lexer, out *SurveyMetricsDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]SurveyMetricDTO, 0, 0)
					} else {
						out.Metrics = []SurveyMetricDTO{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v4 SurveyMetricDTO
					(v4).UnmarshalEasyJSON(in)
					out.Metrics = append(out.Metrics, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto9(out *jwriter.Writer, in SurveyMetricsDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix[1:])
		if in.Metrics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Metrics {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyMetricsDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyMetricsDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyMetricsDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyMetricsDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto9(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto10(in *jlexer.Lexer, out *SurveyMetricDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "avg":
			out.Avg = float64(in.Float64())
		case "distribution":
			if in.IsNull() {
				in.Skip()
				out.Distribution = nil
			} else {
				in.Delim('[')
				if out.Distribution == nil {
					if !in.IsDelim(']') {
						out.Distribution = make([]int, 0, 8)
					} else {
						out.Distribution = []int{}
					}
				} else {
					out.Distribution = (out.Distribution)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.Distribution = append(out.Distribution, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]UserAnswerDTO, 0, 2)
					} else {
						out.Answers = []UserAnswerDTO{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v8 UserAnswerDTO
					(v8).UnmarshalEasyJSON(in)
					out.Answers = append(out.Answers, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto10(out *jwriter.Writer, in SurveyMetricDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"avg\":"
		out.RawString(prefix)
		out.Float64(float64(in.Avg))
	}
	{
		const prefix string = ",\"distribution\":"
		out.RawString(prefix)
		if in.Distribution == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Distribution {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Answers {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyMetricDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyMetricDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyMetricDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyMetricDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto10(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto11(in *jlexer.Lexer, out *SurveyDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]QuestionDTO, 0, 0)
					} else {
						out.Questions = []QuestionDTO{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v13 QuestionDTO
					(v13).UnmarshalEasyJSON(in)
					out.Questions = append(out.Questions, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto11(out *jwriter.Writer, in SurveyDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix[1:])
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Questions {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto11(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto12(in *jlexer.Lexer, out *SurveyAnswerDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionId = int(in.Int())
		case "answer":
			out.Answer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto12(out *jwriter.Writer, in SurveyAnswerDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.QuestionId))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.Int(int(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyAnswerDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyAnswerDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyAnswerDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyAnswerDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto12(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto13(in *jlexer.Lexer, out *RaitingItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto13(out *jwriter.Writer, in RaitingItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RaitingItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RaitingItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RaitingItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RaitingItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto13(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto14(in *jlexer.Lexer, out *Raiting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			if in.IsNull() {
				in.Skip()
				out.Rating = nil
			} else {
				in.Delim('[')
				if out.Rating == nil {
					if !in.IsDelim(']') {
						out.Rating = make([]RaitingItem, 0, 0)
					} else {
						out.Rating = []RaitingItem{}
					}
				} else {
					out.Rating = (out.Rating)[:0]
				}
				for !in.IsDelim(']') {
					var v16 RaitingItem
					(v16).UnmarshalEasyJSON(in)
					out.Rating = append(out.Rating, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto14(out *jwriter.Writer, in Raiting) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix[1:])
		if in.Rating == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Rating {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Raiting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Raiting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Raiting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Raiting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto14(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto15(in *jlexer.Lexer, out *QuizAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "answer_id":
			out.AnswerID = int64(in.Int64())
		case "answer":
			out.Answer = string(in.String())
		case "is_right":
			out.IsRight = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto15(out *jwriter.Writer, in QuizAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"answer_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AnswerID))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	{
		const prefix string = ",\"is_right\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRight))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuizAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuizAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuizAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuizAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto15(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto16(in *jlexer.Lexer, out *QuestionTest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "question":
			out.Question = string(in.String())
		case "user_answer":
			(out.UserAnswer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto16(out *jwriter.Writer, in QuestionTest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"user_answer\":"
		out.RawString(prefix)
		(in.UserAnswer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionTest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionTest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionTest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionTest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto16(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto17(in *jlexer.Lexer, out *QuestionDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionId = int(in.Int())
		case "question":
			out.Question = string(in.String())
		case "left_lebal":
			out.LeftLebal = string(in.String())
		case "right_lebal":
			out.RightLebal = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto17(out *jwriter.Writer, in QuestionDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.QuestionId))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"left_lebal\":"
		out.RawString(prefix)
		out.String(string(in.LeftLebal))
	}
	{
		const prefix string = ",\"right_lebal\":"
		out.RawString(prefix)
		out.String(string(in.RightLebal))
	}
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		out.String(string(in.Metric))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto17(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto18(in *jlexer.Lexer, out *LessonPointDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lesson_id":
			out.LessonId = int(in.Int())
		case "lesson_type":
			out.Type = string(in.String())
		case "lesson_title":
			out.Title = string(in.String())
		case "lesson_value":
			out.Value = string(in.String())
		case "is_done":
			out.IsDone = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto18(out *jwriter.Writer, in LessonPointDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lesson_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LessonId))
	}
	{
		const prefix string = ",\"lesson_type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"lesson_title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"lesson_value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"is_done\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonPointDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonPointDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonPointDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonPointDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto18(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto19(in *jlexer.Lexer, out *LessonIDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lesson_id":
			out.Id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto19(out *jwriter.Writer, in LessonIDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lesson_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonIDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonIDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonIDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonIDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto19(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto20(in *jlexer.Lexer, out *LessonDtoHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "course_title":
			out.CourseTitle = string(in.String())
		case "course_id":
			out.CourseId = int(in.Int())
		case "part":
			easyjson56de76c1Decode(in, &out.Part)
		case "bucket":
			easyjson56de76c1Decode(in, &out.Bucket)
		case "Points":
			if in.IsNull() {
				in.Skip()
				out.Points = nil
			} else {
				in.Delim('[')
				if out.Points == nil {
					if !in.IsDelim(']') {
						out.Points = make([]struct {
							LessonId int    `json:"lesson_id"`
							Type     string `json:"type"`
							IsDone   bool   `json:"is_done"`
						}, 0, 2)
					} else {
						out.Points = []struct {
							LessonId int    `json:"lesson_id"`
							Type     string `json:"type"`
							IsDone   bool   `json:"is_done"`
						}{}
					}
				} else {
					out.Points = (out.Points)[:0]
				}
				for !in.IsDelim(']') {
					var v19 struct {
						LessonId int    `json:"lesson_id"`
						Type     string `json:"type"`
						IsDone   bool   `json:"is_done"`
					}
					easyjson56de76c1Decode1(in, &v19)
					out.Points = append(out.Points, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto20(out *jwriter.Writer, in LessonDtoHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"course_title\":"
		out.RawString(prefix[1:])
		out.String(string(in.CourseTitle))
	}
	{
		const prefix string = ",\"course_id\":"
		out.RawString(prefix)
		out.Int(int(in.CourseId))
	}
	{
		const prefix string = ",\"part\":"
		out.RawString(prefix)
		easyjson56de76c1Encode(out, in.Part)
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		easyjson56de76c1Encode(out, in.Bucket)
	}
	{
		const prefix string = ",\"Points\":"
		out.RawString(prefix)
		if in.Points == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Points {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson56de76c1Encode1(out, v21)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonDtoHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonDtoHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonDtoHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonDtoHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto20(l, v)
}
func easyjson56de76c1Decode1(in *jlexer.Lexer, out *struct {
	LessonId int    `json:"lesson_id"`
	Type     string `json:"type"`
	IsDone   bool   `json:"is_done"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lesson_id":
			out.LessonId = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "is_done":
			out.IsDone = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1Encode1(out *jwriter.Writer, in struct {
	LessonId int    `json:"lesson_id"`
	Type     string `json:"type"`
	IsDone   bool   `json:"is_done"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lesson_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LessonId))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"is_done\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDone))
	}
	out.RawByte('}')
}
func easyjson56de76c1Decode(in *jlexer.Lexer, out *struct {
	Order int    `json:"order"`
	Title string `json:"title"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			out.Order = int(in.Int())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1Encode(out *jwriter.Writer, in struct {
	Order int    `json:"order"`
	Title string `json:"title"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Order))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto21(in *jlexer.Lexer, out *LessonDtoBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blocks":
			if in.IsNull() {
				in.Skip()
				out.Blocks = nil
			} else {
				in.Delim('[')
				if out.Blocks == nil {
					if !in.IsDelim(']') {
						out.Blocks = make([]struct {
							Body string `json:"body"`
						}, 0, 4)
					} else {
						out.Blocks = []struct {
							Body string `json:"body"`
						}{}
					}
				} else {
					out.Blocks = (out.Blocks)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						Body string `json:"body"`
					}
					easyjson56de76c1Decode2(in, &v22)
					out.Blocks = append(out.Blocks, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "footer":
			easyjson56de76c1Decode3(in, &out.Footer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto21(out *jwriter.Writer, in LessonDtoBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blocks\":"
		out.RawString(prefix[1:])
		if in.Blocks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Blocks {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjson56de76c1Encode2(out, v24)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"footer\":"
		out.RawString(prefix)
		easyjson56de76c1Encode3(out, in.Footer)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonDtoBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonDtoBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonDtoBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonDtoBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto21(l, v)
}
func easyjson56de76c1Decode3(in *jlexer.Lexer, out *struct {
	NextLessonId     int `json:"next_lesson_id"`
	CurrentLessonId  int `json:"current_lesson_id"`
	PreviousLessonId int `json:"previous_lesson_id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "next_lesson_id":
			out.NextLessonId = int(in.Int())
		case "current_lesson_id":
			out.CurrentLessonId = int(in.Int())
		case "previous_lesson_id":
			out.PreviousLessonId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1Encode3(out *jwriter.Writer, in struct {
	NextLessonId     int `json:"next_lesson_id"`
	CurrentLessonId  int `json:"current_lesson_id"`
	PreviousLessonId int `json:"previous_lesson_id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"next_lesson_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.NextLessonId))
	}
	{
		const prefix string = ",\"current_lesson_id\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentLessonId))
	}
	{
		const prefix string = ",\"previous_lesson_id\":"
		out.RawString(prefix)
		out.Int(int(in.PreviousLessonId))
	}
	out.RawByte('}')
}
func easyjson56de76c1Decode2(in *jlexer.Lexer, out *struct {
	Body string `json:"body"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1Encode2(out *jwriter.Writer, in struct {
	Body string `json:"body"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		out.String(string(in.Body))
	}
	out.RawByte('}')
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto22(in *jlexer.Lexer, out *LessonDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			(out.LessonHeader).UnmarshalEasyJSON(in)
		case "lesson_body":
			(out.LessonBody).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto22(out *jwriter.Writer, in LessonDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix[1:])
		(in.LessonHeader).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"lesson_body\":"
		out.RawString(prefix)
		(in.LessonBody).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto22(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto23(in *jlexer.Lexer, out *LessonBucketDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bucket_id":
			out.Id = int(in.Int())
		case "bucket_title":
			out.Title = string(in.String())
		case "lessons":
			if in.IsNull() {
				in.Skip()
				out.Lessons = nil
			} else {
				in.Delim('[')
				if out.Lessons == nil {
					if !in.IsDelim(']') {
						out.Lessons = make([]*LessonPointDTO, 0, 8)
					} else {
						out.Lessons = []*LessonPointDTO{}
					}
				} else {
					out.Lessons = (out.Lessons)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *LessonPointDTO
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(LessonPointDTO)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.Lessons = append(out.Lessons, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto23(out *jwriter.Writer, in LessonBucketDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bucket_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"bucket_title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"lessons\":"
		out.RawString(prefix)
		if in.Lessons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Lessons {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonBucketDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonBucketDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonBucketDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonBucketDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto23(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto24(in *jlexer.Lexer, out *CourseRoadmapDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parts":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]*CoursePartDTO, 0, 8)
					} else {
						out.Parts = []*CoursePartDTO{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *CoursePartDTO
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(CoursePartDTO)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Parts = append(out.Parts, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto24(out *jwriter.Writer, in CourseRoadmapDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parts\":"
		out.RawString(prefix[1:])
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Parts {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CourseRoadmapDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CourseRoadmapDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CourseRoadmapDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CourseRoadmapDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto24(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto25(in *jlexer.Lexer, out *CoursePartDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "part_id":
			out.Id = int(in.Int())
		case "part_title":
			out.Title = string(in.String())
		case "buckets":
			if in.IsNull() {
				in.Skip()
				out.Buckets = nil
			} else {
				in.Delim('[')
				if out.Buckets == nil {
					if !in.IsDelim(']') {
						out.Buckets = make([]*LessonBucketDTO, 0, 8)
					} else {
						out.Buckets = []*LessonBucketDTO{}
					}
				} else {
					out.Buckets = (out.Buckets)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *LessonBucketDTO
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(LessonBucketDTO)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Buckets = append(out.Buckets, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto25(out *jwriter.Writer, in CoursePartDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"part_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"part_title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"buckets\":"
		out.RawString(prefix)
		if in.Buckets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Buckets {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CoursePartDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CoursePartDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CoursePartDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CoursePartDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto25(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto26(in *jlexer.Lexer, out *CourseIDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "course_id":
			out.Id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto26(out *jwriter.Writer, in CourseIDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"course_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CourseIDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CourseIDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CourseIDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CourseIDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto26(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto27(in *jlexer.Lexer, out *CourseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "price":
			out.Price = int(in.Int())
		case "purchases_amount":
			out.PurchasesAmount = int(in.Int())
		case "creator_id":
			out.CreatorId = int(in.Int())
		case "time_to_pass":
			out.TimeToPass = int(in.Int())
		case "rating":
			out.Rating = float32(in.Float32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Tags = append(out.Tags, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "src_image":
			out.ScrImage = string(in.String())
		case "is_purchased":
			out.IsPurchased = bool(in.Bool())
		case "is_completed":
			out.IsCompleted = bool(in.Bool())
		case "parts":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]*CoursePartDTO, 0, 8)
					} else {
						out.Parts = []*CoursePartDTO{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *CoursePartDTO
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(CoursePartDTO)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					out.Parts = append(out.Parts, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_favorite":
			out.IsFavorite = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto27(out *jwriter.Writer, in CourseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"purchases_amount\":"
		out.RawString(prefix)
		out.Int(int(in.PurchasesAmount))
	}
	{
		const prefix string = ",\"creator_id\":"
		out.RawString(prefix)
		out.Int(int(in.CreatorId))
	}
	{
		const prefix string = ",\"time_to_pass\":"
		out.RawString(prefix)
		out.Int(int(in.TimeToPass))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Tags {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"src_image\":"
		out.RawString(prefix)
		out.String(string(in.ScrImage))
	}
	{
		const prefix string = ",\"is_purchased\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPurchased))
	}
	{
		const prefix string = ",\"is_completed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCompleted))
	}
	{
		const prefix string = ",\"parts\":"
		out.RawString(prefix)
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Parts {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFavorite))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CourseDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CourseDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CourseDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CourseDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto27(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto28(in *jlexer.Lexer, out *AnswerQuestion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = int(in.Int())
		case "answer":
			out.Answer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto28(out *jwriter.Writer, in AnswerQuestion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.QuestionID))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerQuestion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerQuestion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerQuestion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerQuestion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto28(l, v)
}
func easyjson56de76c1DecodeSkillForceInternalModelsDto29(in *jlexer.Lexer, out *Answer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = int(in.Int())
		case "answer_id":
			out.Answer_ID = int(in.Int())
		case "course_id":
			out.Course_ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeSkillForceInternalModelsDto29(out *jwriter.Writer, in Answer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.QuestionID))
	}
	{
		const prefix string = ",\"answer_id\":"
		out.RawString(prefix)
		out.Int(int(in.Answer_ID))
	}
	{
		const prefix string = ",\"course_id\":"
		out.RawString(prefix)
		out.Int(int(in.Course_ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Answer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeSkillForceInternalModelsDto29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Answer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeSkillForceInternalModelsDto29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Answer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeSkillForceInternalModelsDto29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Answer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeSkillForceInternalModelsDto29(l, v)
}
