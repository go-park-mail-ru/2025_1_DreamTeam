// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coursepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseServiceClient interface {
	GetBucketCourses(ctx context.Context, in *GetBucketCoursesRequest, opts ...grpc.CallOption) (*GetBucketCoursesResponse, error)
	GetCourseLesson(ctx context.Context, in *GetCourseLessonRequest, opts ...grpc.CallOption) (*GetCourseLessonResponse, error)
	GetNextLesson(ctx context.Context, in *GetNextLessonRequest, opts ...grpc.CallOption) (*GetNextLessonResponse, error)
	MarkLessonAsNotCompleted(ctx context.Context, in *MarkLessonAsNotCompletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCourseRoadmap(ctx context.Context, in *GetCourseRoadmapRequest, opts ...grpc.CallOption) (*GetCourseRoadmapResponse, error)
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCourseToFavourites(ctx context.Context, in *AddToFavouritesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCourseFromFavourites(ctx context.Context, in *DeleteCourseFromFavouritesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFavouriteCourses(ctx context.Context, in *GetFavouritesRequest, opts ...grpc.CallOption) (*GetFavouritesResponse, error)
	GetTestLesson(ctx context.Context, in *GetTestLessonRequest, opts ...grpc.CallOption) (*GetTestLessonResponse, error)
	AnswerQuiz(ctx context.Context, in *AnswerQuizRequest, opts ...grpc.CallOption) (*AnswerQuizResponse, error)
	GetQuestionTestLesson(ctx context.Context, in *GetQuestionTestLessonRequest, opts ...grpc.CallOption) (*GetQuestionTestLessonResponse, error)
	AnswerQuestion(ctx context.Context, in *AnswerQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) GetBucketCourses(ctx context.Context, in *GetBucketCoursesRequest, opts ...grpc.CallOption) (*GetBucketCoursesResponse, error) {
	out := new(GetBucketCoursesResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetBucketCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourseLesson(ctx context.Context, in *GetCourseLessonRequest, opts ...grpc.CallOption) (*GetCourseLessonResponse, error) {
	out := new(GetCourseLessonResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetCourseLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetNextLesson(ctx context.Context, in *GetNextLessonRequest, opts ...grpc.CallOption) (*GetNextLessonResponse, error) {
	out := new(GetNextLessonResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetNextLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) MarkLessonAsNotCompleted(ctx context.Context, in *MarkLessonAsNotCompletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/course.CourseService/MarkLessonAsNotCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourseRoadmap(ctx context.Context, in *GetCourseRoadmapRequest, opts ...grpc.CallOption) (*GetCourseRoadmapResponse, error) {
	out := new(GetCourseRoadmapResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetCourseRoadmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/course.CourseService/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AddCourseToFavourites(ctx context.Context, in *AddToFavouritesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/course.CourseService/AddCourseToFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteCourseFromFavourites(ctx context.Context, in *DeleteCourseFromFavouritesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/course.CourseService/DeleteCourseFromFavourites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetFavouriteCourses(ctx context.Context, in *GetFavouritesRequest, opts ...grpc.CallOption) (*GetFavouritesResponse, error) {
	out := new(GetFavouritesResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetFavouriteCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetTestLesson(ctx context.Context, in *GetTestLessonRequest, opts ...grpc.CallOption) (*GetTestLessonResponse, error) {
	out := new(GetTestLessonResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetTestLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AnswerQuiz(ctx context.Context, in *AnswerQuizRequest, opts ...grpc.CallOption) (*AnswerQuizResponse, error) {
	out := new(AnswerQuizResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/AnswerQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetQuestionTestLesson(ctx context.Context, in *GetQuestionTestLessonRequest, opts ...grpc.CallOption) (*GetQuestionTestLessonResponse, error) {
	out := new(GetQuestionTestLessonResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetQuestionTestLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AnswerQuestion(ctx context.Context, in *AnswerQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/course.CourseService/AnswerQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
// All implementations must embed UnimplementedCourseServiceServer
// for forward compatibility
type CourseServiceServer interface {
	GetBucketCourses(context.Context, *GetBucketCoursesRequest) (*GetBucketCoursesResponse, error)
	GetCourseLesson(context.Context, *GetCourseLessonRequest) (*GetCourseLessonResponse, error)
	GetNextLesson(context.Context, *GetNextLessonRequest) (*GetNextLessonResponse, error)
	MarkLessonAsNotCompleted(context.Context, *MarkLessonAsNotCompletedRequest) (*emptypb.Empty, error)
	GetCourseRoadmap(context.Context, *GetCourseRoadmapRequest) (*GetCourseRoadmapResponse, error)
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	CreateCourse(context.Context, *CreateCourseRequest) (*emptypb.Empty, error)
	AddCourseToFavourites(context.Context, *AddToFavouritesRequest) (*emptypb.Empty, error)
	DeleteCourseFromFavourites(context.Context, *DeleteCourseFromFavouritesRequest) (*emptypb.Empty, error)
	GetFavouriteCourses(context.Context, *GetFavouritesRequest) (*GetFavouritesResponse, error)
	GetTestLesson(context.Context, *GetTestLessonRequest) (*GetTestLessonResponse, error)
	AnswerQuiz(context.Context, *AnswerQuizRequest) (*AnswerQuizResponse, error)
	GetQuestionTestLesson(context.Context, *GetQuestionTestLessonRequest) (*GetQuestionTestLessonResponse, error)
	AnswerQuestion(context.Context, *AnswerQuestionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCourseServiceServer()
}

// UnimplementedCourseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (UnimplementedCourseServiceServer) GetBucketCourses(context.Context, *GetBucketCoursesRequest) (*GetBucketCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketCourses not implemented")
}
func (UnimplementedCourseServiceServer) GetCourseLesson(context.Context, *GetCourseLessonRequest) (*GetCourseLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseLesson not implemented")
}
func (UnimplementedCourseServiceServer) GetNextLesson(context.Context, *GetNextLessonRequest) (*GetNextLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextLesson not implemented")
}
func (UnimplementedCourseServiceServer) MarkLessonAsNotCompleted(context.Context, *MarkLessonAsNotCompletedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkLessonAsNotCompleted not implemented")
}
func (UnimplementedCourseServiceServer) GetCourseRoadmap(context.Context, *GetCourseRoadmapRequest) (*GetCourseRoadmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseRoadmap not implemented")
}
func (UnimplementedCourseServiceServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCourseServiceServer) CreateCourse(context.Context, *CreateCourseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedCourseServiceServer) AddCourseToFavourites(context.Context, *AddToFavouritesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourseToFavourites not implemented")
}
func (UnimplementedCourseServiceServer) DeleteCourseFromFavourites(context.Context, *DeleteCourseFromFavouritesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseFromFavourites not implemented")
}
func (UnimplementedCourseServiceServer) GetFavouriteCourses(context.Context, *GetFavouritesRequest) (*GetFavouritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavouriteCourses not implemented")
}
func (UnimplementedCourseServiceServer) GetTestLesson(context.Context, *GetTestLessonRequest) (*GetTestLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestLesson not implemented")
}
func (UnimplementedCourseServiceServer) AnswerQuiz(context.Context, *AnswerQuizRequest) (*AnswerQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuiz not implemented")
}
func (UnimplementedCourseServiceServer) GetQuestionTestLesson(context.Context, *GetQuestionTestLessonRequest) (*GetQuestionTestLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionTestLesson not implemented")
}
func (UnimplementedCourseServiceServer) AnswerQuestion(context.Context, *AnswerQuestionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuestion not implemented")
}
func (UnimplementedCourseServiceServer) mustEmbedUnimplementedCourseServiceServer() {}

// UnsafeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServiceServer will
// result in compilation errors.
type UnsafeCourseServiceServer interface {
	mustEmbedUnimplementedCourseServiceServer()
}

func RegisterCourseServiceServer(s grpc.ServiceRegistrar, srv CourseServiceServer) {
	s.RegisterService(&CourseService_ServiceDesc, srv)
}

func _CourseService_GetBucketCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetBucketCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetBucketCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetBucketCourses(ctx, req.(*GetBucketCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourseLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourseLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetCourseLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourseLesson(ctx, req.(*GetCourseLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetNextLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetNextLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetNextLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetNextLesson(ctx, req.(*GetNextLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_MarkLessonAsNotCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkLessonAsNotCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).MarkLessonAsNotCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/MarkLessonAsNotCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).MarkLessonAsNotCompleted(ctx, req.(*MarkLessonAsNotCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourseRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourseRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetCourseRoadmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourseRoadmap(ctx, req.(*GetCourseRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AddCourseToFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AddCourseToFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/AddCourseToFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AddCourseToFavourites(ctx, req.(*AddToFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteCourseFromFavourites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseFromFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteCourseFromFavourites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/DeleteCourseFromFavourites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteCourseFromFavourites(ctx, req.(*DeleteCourseFromFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetFavouriteCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavouritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetFavouriteCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetFavouriteCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetFavouriteCourses(ctx, req.(*GetFavouritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetTestLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetTestLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetTestLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetTestLesson(ctx, req.(*GetTestLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AnswerQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AnswerQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/AnswerQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AnswerQuiz(ctx, req.(*AnswerQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetQuestionTestLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionTestLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetQuestionTestLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetQuestionTestLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetQuestionTestLesson(ctx, req.(*GetQuestionTestLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AnswerQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AnswerQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/AnswerQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AnswerQuestion(ctx, req.(*AnswerQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseService_ServiceDesc is the grpc.ServiceDesc for CourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBucketCourses",
			Handler:    _CourseService_GetBucketCourses_Handler,
		},
		{
			MethodName: "GetCourseLesson",
			Handler:    _CourseService_GetCourseLesson_Handler,
		},
		{
			MethodName: "GetNextLesson",
			Handler:    _CourseService_GetNextLesson_Handler,
		},
		{
			MethodName: "MarkLessonAsNotCompleted",
			Handler:    _CourseService_MarkLessonAsNotCompleted_Handler,
		},
		{
			MethodName: "GetCourseRoadmap",
			Handler:    _CourseService_GetCourseRoadmap_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _CourseService_GetCourse_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _CourseService_CreateCourse_Handler,
		},
		{
			MethodName: "AddCourseToFavourites",
			Handler:    _CourseService_AddCourseToFavourites_Handler,
		},
		{
			MethodName: "DeleteCourseFromFavourites",
			Handler:    _CourseService_DeleteCourseFromFavourites_Handler,
		},
		{
			MethodName: "GetFavouriteCourses",
			Handler:    _CourseService_GetFavouriteCourses_Handler,
		},
		{
			MethodName: "GetTestLesson",
			Handler:    _CourseService_GetTestLesson_Handler,
		},
		{
			MethodName: "AnswerQuiz",
			Handler:    _CourseService_AnswerQuiz_Handler,
		},
		{
			MethodName: "GetQuestionTestLesson",
			Handler:    _CourseService_GetQuestionTestLesson_Handler,
		},
		{
			MethodName: "AnswerQuestion",
			Handler:    _CourseService_AnswerQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course.proto",
}
