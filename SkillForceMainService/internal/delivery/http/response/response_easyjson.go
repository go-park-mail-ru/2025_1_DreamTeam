// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package response

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	dto "skillForce/internal/models/dto"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse(in *jlexer.Lexer, out *UserProfileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.UserProfile = nil
			} else {
				if out.UserProfile == nil {
					out.UserProfile = new(dto.UserProfileDTO)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto(in, out.UserProfile)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse(out *jwriter.Writer, in UserProfileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.UserProfile == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto(out, *in.UserProfile)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto(in *jlexer.Lexer, out *dto.UserProfileDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "bio":
			out.Bio = string(in.String())
		case "avatar_src":
			out.AvatarSrc = string(in.String())
		case "hide_email":
			out.HideEmail = bool(in.Bool())
		case "is_admin":
			out.IsAdmin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto(out *jwriter.Writer, in dto.UserProfileDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"avatar_src\":"
		out.RawString(prefix)
		out.String(string(in.AvatarSrc))
	}
	{
		const prefix string = ",\"hide_email\":"
		out.RawString(prefix)
		out.Bool(bool(in.HideEmail))
	}
	{
		const prefix string = ",\"is_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse1(in *jlexer.Lexer, out *TestResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "test":
			if in.IsNull() {
				in.Skip()
				out.Test = nil
			} else {
				if out.Test == nil {
					out.Test = new(dto.Test)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto1(in, out.Test)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse1(out *jwriter.Writer, in TestResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"test\":"
		out.RawString(prefix[1:])
		if in.Test == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto1(out, *in.Test)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TestResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TestResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TestResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TestResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse1(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto1(in *jlexer.Lexer, out *dto.Test) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "question":
			out.Question = string(in.String())
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]*dto.QuizAnswer, 0, 8)
					} else {
						out.Answers = []*dto.QuizAnswer{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *dto.QuizAnswer
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(dto.QuizAnswer)
						}
						easyjson6ff3ac1dDecodeSkillForceInternalModelsDto2(in, v1)
					}
					out.Answers = append(out.Answers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_answer":
			easyjson6ff3ac1dDecodeSkillForceInternalModelsDto3(in, &out.UserAnswer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto1(out *jwriter.Writer, in dto.Test) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Answers {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson6ff3ac1dEncodeSkillForceInternalModelsDto2(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_answer\":"
		out.RawString(prefix)
		easyjson6ff3ac1dEncodeSkillForceInternalModelsDto3(out, in.UserAnswer)
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto3(in *jlexer.Lexer, out *dto.UserAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_right":
			out.IsRight = bool(in.Bool())
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "answer_id":
			out.AnswerID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto3(out *jwriter.Writer, in dto.UserAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_right\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsRight))
	}
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"answer_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.AnswerID))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto2(in *jlexer.Lexer, out *dto.QuizAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "answer_id":
			out.AnswerID = int64(in.Int64())
		case "answer":
			out.Answer = string(in.String())
		case "is_right":
			out.IsRight = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto2(out *jwriter.Writer, in dto.QuizAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"answer_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AnswerID))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	{
		const prefix string = ",\"is_right\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRight))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse2(in *jlexer.Lexer, out *SurveyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "survey":
			if in.IsNull() {
				in.Skip()
				out.Survey = nil
			} else {
				if out.Survey == nil {
					out.Survey = new(dto.SurveyDTO)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto4(in, out.Survey)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse2(out *jwriter.Writer, in SurveyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"survey\":"
		out.RawString(prefix[1:])
		if in.Survey == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto4(out, *in.Survey)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse2(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto4(in *jlexer.Lexer, out *dto.SurveyDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]dto.QuestionDTO, 0, 0)
					} else {
						out.Questions = []dto.QuestionDTO{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 dto.QuestionDTO
					easyjson6ff3ac1dDecodeSkillForceInternalModelsDto5(in, &v4)
					out.Questions = append(out.Questions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto4(out *jwriter.Writer, in dto.SurveyDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix[1:])
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Questions {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncodeSkillForceInternalModelsDto5(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto5(in *jlexer.Lexer, out *dto.QuestionDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionId = int(in.Int())
		case "question":
			out.Question = string(in.String())
		case "left_lebal":
			out.LeftLebal = string(in.String())
		case "right_lebal":
			out.RightLebal = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto5(out *jwriter.Writer, in dto.QuestionDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.QuestionId))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"left_lebal\":"
		out.RawString(prefix)
		out.String(string(in.LeftLebal))
	}
	{
		const prefix string = ",\"right_lebal\":"
		out.RawString(prefix)
		out.String(string(in.RightLebal))
	}
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		out.String(string(in.Metric))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse3(in *jlexer.Lexer, out *SurveyMetricsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "survey_metrics":
			if in.IsNull() {
				in.Skip()
				out.SurveyMetrics = nil
			} else {
				if out.SurveyMetrics == nil {
					out.SurveyMetrics = new(dto.SurveyMetricsDTO)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto6(in, out.SurveyMetrics)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse3(out *jwriter.Writer, in SurveyMetricsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"survey_metrics\":"
		out.RawString(prefix[1:])
		if in.SurveyMetrics == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto6(out, *in.SurveyMetrics)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyMetricsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyMetricsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyMetricsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyMetricsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse3(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto6(in *jlexer.Lexer, out *dto.SurveyMetricsDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]dto.SurveyMetricDTO, 0, 0)
					} else {
						out.Metrics = []dto.SurveyMetricDTO{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v7 dto.SurveyMetricDTO
					easyjson6ff3ac1dDecodeSkillForceInternalModelsDto7(in, &v7)
					out.Metrics = append(out.Metrics, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto6(out *jwriter.Writer, in dto.SurveyMetricsDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix[1:])
		if in.Metrics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Metrics {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncodeSkillForceInternalModelsDto7(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto7(in *jlexer.Lexer, out *dto.SurveyMetricDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "avg":
			out.Avg = float64(in.Float64())
		case "distribution":
			if in.IsNull() {
				in.Skip()
				out.Distribution = nil
			} else {
				in.Delim('[')
				if out.Distribution == nil {
					if !in.IsDelim(']') {
						out.Distribution = make([]int, 0, 8)
					} else {
						out.Distribution = []int{}
					}
				} else {
					out.Distribution = (out.Distribution)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int
					v10 = int(in.Int())
					out.Distribution = append(out.Distribution, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]dto.UserAnswerDTO, 0, 2)
					} else {
						out.Answers = []dto.UserAnswerDTO{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v11 dto.UserAnswerDTO
					easyjson6ff3ac1dDecodeSkillForceInternalModelsDto8(in, &v11)
					out.Answers = append(out.Answers, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto7(out *jwriter.Writer, in dto.SurveyMetricDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"avg\":"
		out.RawString(prefix)
		out.Float64(float64(in.Avg))
	}
	{
		const prefix string = ",\"distribution\":"
		out.RawString(prefix)
		if in.Distribution == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Distribution {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Answers {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncodeSkillForceInternalModelsDto8(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto8(in *jlexer.Lexer, out *dto.UserAnswerDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "answer":
			out.Answer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto8(out *jwriter.Writer, in dto.UserAnswerDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.Int(int(in.Answer))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse4(in *jlexer.Lexer, out *StatisticResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statistic":
			if in.IsNull() {
				in.Skip()
				out.Statistic = nil
			} else {
				if out.Statistic == nil {
					out.Statistic = new(dto.UserStats)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto9(in, out.Statistic)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse4(out *jwriter.Writer, in StatisticResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statistic\":"
		out.RawString(prefix[1:])
		if in.Statistic == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto9(out, *in.Statistic)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatisticResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatisticResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatisticResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatisticResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse4(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto9(in *jlexer.Lexer, out *dto.UserStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "percentage":
			out.Percentage = int(in.Int())
		case "completed_lessons":
			out.CompletedTextLessons = int(in.Int())
		case "amount_lessons":
			out.AmountTextLessons = int(in.Int())
		case "completed_videos":
			out.CompletedVideoLessons = int(in.Int())
		case "amount_videos":
			out.AmountVideoLessons = int(in.Int())
		case "received_points":
			out.RecievedPoints = int(in.Int())
		case "amount_points":
			out.AmountPoints = int(in.Int())
		case "completed_tests":
			out.CompletedTests = int(in.Int())
		case "amount_tests":
			out.AmountTests = int(in.Int())
		case "completed_questions":
			out.CompletedQuestions = int(in.Int())
		case "amount_questions":
			out.AmountQuestions = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto9(out *jwriter.Writer, in dto.UserStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"percentage\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Percentage))
	}
	{
		const prefix string = ",\"completed_lessons\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedTextLessons))
	}
	{
		const prefix string = ",\"amount_lessons\":"
		out.RawString(prefix)
		out.Int(int(in.AmountTextLessons))
	}
	{
		const prefix string = ",\"completed_videos\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedVideoLessons))
	}
	{
		const prefix string = ",\"amount_videos\":"
		out.RawString(prefix)
		out.Int(int(in.AmountVideoLessons))
	}
	{
		const prefix string = ",\"received_points\":"
		out.RawString(prefix)
		out.Int(int(in.RecievedPoints))
	}
	{
		const prefix string = ",\"amount_points\":"
		out.RawString(prefix)
		out.Int(int(in.AmountPoints))
	}
	{
		const prefix string = ",\"completed_tests\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedTests))
	}
	{
		const prefix string = ",\"amount_tests\":"
		out.RawString(prefix)
		out.Int(int(in.AmountTests))
	}
	{
		const prefix string = ",\"completed_questions\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedQuestions))
	}
	{
		const prefix string = ",\"amount_questions\":"
		out.RawString(prefix)
		out.Int(int(in.AmountQuestions))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse5(in *jlexer.Lexer, out *SertificateUrlResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse5(out *jwriter.Writer, in SertificateUrlResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SertificateUrlResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SertificateUrlResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SertificateUrlResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SertificateUrlResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse5(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse6(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.Result = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse6(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse6(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse7(in *jlexer.Lexer, out *RaitingResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "course_raiting":
			if in.IsNull() {
				in.Skip()
				out.Raiting = nil
			} else {
				if out.Raiting == nil {
					out.Raiting = new(dto.Raiting)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto10(in, out.Raiting)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse7(out *jwriter.Writer, in RaitingResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"course_raiting\":"
		out.RawString(prefix[1:])
		if in.Raiting == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto10(out, *in.Raiting)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RaitingResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RaitingResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RaitingResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RaitingResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse7(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto10(in *jlexer.Lexer, out *dto.Raiting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			if in.IsNull() {
				in.Skip()
				out.Rating = nil
			} else {
				in.Delim('[')
				if out.Rating == nil {
					if !in.IsDelim(']') {
						out.Rating = make([]dto.RaitingItem, 0, 0)
					} else {
						out.Rating = []dto.RaitingItem{}
					}
				} else {
					out.Rating = (out.Rating)[:0]
				}
				for !in.IsDelim(']') {
					var v16 dto.RaitingItem
					easyjson6ff3ac1dDecodeSkillForceInternalModelsDto11(in, &v16)
					out.Rating = append(out.Rating, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto10(out *jwriter.Writer, in dto.Raiting) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix[1:])
		if in.Rating == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Rating {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncodeSkillForceInternalModelsDto11(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto11(in *jlexer.Lexer, out *dto.RaitingItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			easyjson6ff3ac1dDecodeSkillForceInternalModelsDto(in, &out.User)
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto11(out *jwriter.Writer, in dto.RaitingItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		easyjson6ff3ac1dEncodeSkillForceInternalModelsDto(out, in.User)
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse8(in *jlexer.Lexer, out *QuestionTestResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question":
			if in.IsNull() {
				in.Skip()
				out.Question = nil
			} else {
				if out.Question == nil {
					out.Question = new(dto.QuestionTest)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto12(in, out.Question)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse8(out *jwriter.Writer, in QuestionTestResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix[1:])
		if in.Question == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto12(out, *in.Question)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionTestResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionTestResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionTestResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionTestResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse8(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto12(in *jlexer.Lexer, out *dto.QuestionTest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "question":
			out.Question = string(in.String())
		case "user_answer":
			easyjson6ff3ac1dDecodeSkillForceInternalModelsDto13(in, &out.UserAnswer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto12(out *jwriter.Writer, in dto.QuestionTest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"user_answer\":"
		out.RawString(prefix)
		easyjson6ff3ac1dEncodeSkillForceInternalModelsDto13(out, in.UserAnswer)
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto13(in *jlexer.Lexer, out *dto.UserQuestionAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "answer":
			out.Answer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto13(out *jwriter.Writer, in dto.UserQuestionAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse9(in *jlexer.Lexer, out *PhotoUrlResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse9(out *jwriter.Writer, in PhotoUrlResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoUrlResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoUrlResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoUrlResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoUrlResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse9(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse10(in *jlexer.Lexer, out *LessonResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lesson":
			if in.IsNull() {
				in.Skip()
				out.Lesson = nil
			} else {
				if out.Lesson == nil {
					out.Lesson = new(dto.LessonDTO)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto14(in, out.Lesson)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse10(out *jwriter.Writer, in LessonResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lesson\":"
		out.RawString(prefix[1:])
		if in.Lesson == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto14(out, *in.Lesson)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse10(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto14(in *jlexer.Lexer, out *dto.LessonDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			easyjson6ff3ac1dDecodeSkillForceInternalModelsDto15(in, &out.LessonHeader)
		case "lesson_body":
			easyjson6ff3ac1dDecodeSkillForceInternalModelsDto16(in, &out.LessonBody)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto14(out *jwriter.Writer, in dto.LessonDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix[1:])
		easyjson6ff3ac1dEncodeSkillForceInternalModelsDto15(out, in.LessonHeader)
	}
	{
		const prefix string = ",\"lesson_body\":"
		out.RawString(prefix)
		easyjson6ff3ac1dEncodeSkillForceInternalModelsDto16(out, in.LessonBody)
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto16(in *jlexer.Lexer, out *dto.LessonDtoBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blocks":
			if in.IsNull() {
				in.Skip()
				out.Blocks = nil
			} else {
				in.Delim('[')
				if out.Blocks == nil {
					if !in.IsDelim(']') {
						out.Blocks = make([]struct {
							Body string `json:"body"`
						}, 0, 4)
					} else {
						out.Blocks = []struct {
							Body string `json:"body"`
						}{}
					}
				} else {
					out.Blocks = (out.Blocks)[:0]
				}
				for !in.IsDelim(']') {
					var v19 struct {
						Body string `json:"body"`
					}
					easyjson6ff3ac1dDecode(in, &v19)
					out.Blocks = append(out.Blocks, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "footer":
			easyjson6ff3ac1dDecode1(in, &out.Footer)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto16(out *jwriter.Writer, in dto.LessonDtoBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blocks\":"
		out.RawString(prefix[1:])
		if in.Blocks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Blocks {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncode(out, v21)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"footer\":"
		out.RawString(prefix)
		easyjson6ff3ac1dEncode1(out, in.Footer)
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecode1(in *jlexer.Lexer, out *struct {
	NextLessonId     int `json:"next_lesson_id"`
	CurrentLessonId  int `json:"current_lesson_id"`
	PreviousLessonId int `json:"previous_lesson_id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "next_lesson_id":
			out.NextLessonId = int(in.Int())
		case "current_lesson_id":
			out.CurrentLessonId = int(in.Int())
		case "previous_lesson_id":
			out.PreviousLessonId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncode1(out *jwriter.Writer, in struct {
	NextLessonId     int `json:"next_lesson_id"`
	CurrentLessonId  int `json:"current_lesson_id"`
	PreviousLessonId int `json:"previous_lesson_id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"next_lesson_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.NextLessonId))
	}
	{
		const prefix string = ",\"current_lesson_id\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentLessonId))
	}
	{
		const prefix string = ",\"previous_lesson_id\":"
		out.RawString(prefix)
		out.Int(int(in.PreviousLessonId))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecode(in *jlexer.Lexer, out *struct {
	Body string `json:"body"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncode(out *jwriter.Writer, in struct {
	Body string `json:"body"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		out.String(string(in.Body))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto15(in *jlexer.Lexer, out *dto.LessonDtoHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "course_title":
			out.CourseTitle = string(in.String())
		case "course_id":
			out.CourseId = int(in.Int())
		case "part":
			easyjson6ff3ac1dDecode2(in, &out.Part)
		case "bucket":
			easyjson6ff3ac1dDecode2(in, &out.Bucket)
		case "Points":
			if in.IsNull() {
				in.Skip()
				out.Points = nil
			} else {
				in.Delim('[')
				if out.Points == nil {
					if !in.IsDelim(']') {
						out.Points = make([]struct {
							LessonId int    `json:"lesson_id"`
							Type     string `json:"type"`
							IsDone   bool   `json:"is_done"`
						}, 0, 2)
					} else {
						out.Points = []struct {
							LessonId int    `json:"lesson_id"`
							Type     string `json:"type"`
							IsDone   bool   `json:"is_done"`
						}{}
					}
				} else {
					out.Points = (out.Points)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						LessonId int    `json:"lesson_id"`
						Type     string `json:"type"`
						IsDone   bool   `json:"is_done"`
					}
					easyjson6ff3ac1dDecode3(in, &v22)
					out.Points = append(out.Points, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto15(out *jwriter.Writer, in dto.LessonDtoHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"course_title\":"
		out.RawString(prefix[1:])
		out.String(string(in.CourseTitle))
	}
	{
		const prefix string = ",\"course_id\":"
		out.RawString(prefix)
		out.Int(int(in.CourseId))
	}
	{
		const prefix string = ",\"part\":"
		out.RawString(prefix)
		easyjson6ff3ac1dEncode2(out, in.Part)
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		easyjson6ff3ac1dEncode2(out, in.Bucket)
	}
	{
		const prefix string = ",\"Points\":"
		out.RawString(prefix)
		if in.Points == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Points {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncode3(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecode3(in *jlexer.Lexer, out *struct {
	LessonId int    `json:"lesson_id"`
	Type     string `json:"type"`
	IsDone   bool   `json:"is_done"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lesson_id":
			out.LessonId = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "is_done":
			out.IsDone = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncode3(out *jwriter.Writer, in struct {
	LessonId int    `json:"lesson_id"`
	Type     string `json:"type"`
	IsDone   bool   `json:"is_done"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lesson_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LessonId))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"is_done\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDone))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecode2(in *jlexer.Lexer, out *struct {
	Order int    `json:"order"`
	Title string `json:"title"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			out.Order = int(in.Int())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncode2(out *jwriter.Writer, in struct {
	Order int    `json:"order"`
	Title string `json:"title"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Order))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse11(in *jlexer.Lexer, out *LessonBodyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lesson_body":
			if in.IsNull() {
				in.Skip()
				out.LessonBody = nil
			} else {
				if out.LessonBody == nil {
					out.LessonBody = new(dto.LessonDtoBody)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto16(in, out.LessonBody)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse11(out *jwriter.Writer, in LessonBodyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lesson_body\":"
		out.RawString(prefix[1:])
		if in.LessonBody == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto16(out, *in.LessonBody)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LessonBodyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LessonBodyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LessonBodyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LessonBodyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse11(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse12(in *jlexer.Lexer, out *ErrorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.ErrorStr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse12(out *jwriter.Writer, in ErrorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.ErrorStr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse12(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse13(in *jlexer.Lexer, out *CourseRoadmapResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "course_roadmap":
			if in.IsNull() {
				in.Skip()
				out.CourseRoadmap = nil
			} else {
				if out.CourseRoadmap == nil {
					out.CourseRoadmap = new(dto.CourseRoadmapDTO)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto17(in, out.CourseRoadmap)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse13(out *jwriter.Writer, in CourseRoadmapResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"course_roadmap\":"
		out.RawString(prefix[1:])
		if in.CourseRoadmap == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto17(out, *in.CourseRoadmap)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CourseRoadmapResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CourseRoadmapResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CourseRoadmapResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CourseRoadmapResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse13(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto17(in *jlexer.Lexer, out *dto.CourseRoadmapDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parts":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]*dto.CoursePartDTO, 0, 8)
					} else {
						out.Parts = []*dto.CoursePartDTO{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *dto.CoursePartDTO
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(dto.CoursePartDTO)
						}
						easyjson6ff3ac1dDecodeSkillForceInternalModelsDto18(in, v25)
					}
					out.Parts = append(out.Parts, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto17(out *jwriter.Writer, in dto.CourseRoadmapDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parts\":"
		out.RawString(prefix[1:])
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Parts {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjson6ff3ac1dEncodeSkillForceInternalModelsDto18(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto18(in *jlexer.Lexer, out *dto.CoursePartDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "part_id":
			out.Id = int(in.Int())
		case "part_title":
			out.Title = string(in.String())
		case "buckets":
			if in.IsNull() {
				in.Skip()
				out.Buckets = nil
			} else {
				in.Delim('[')
				if out.Buckets == nil {
					if !in.IsDelim(']') {
						out.Buckets = make([]*dto.LessonBucketDTO, 0, 8)
					} else {
						out.Buckets = []*dto.LessonBucketDTO{}
					}
				} else {
					out.Buckets = (out.Buckets)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *dto.LessonBucketDTO
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(dto.LessonBucketDTO)
						}
						easyjson6ff3ac1dDecodeSkillForceInternalModelsDto19(in, v28)
					}
					out.Buckets = append(out.Buckets, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto18(out *jwriter.Writer, in dto.CoursePartDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"part_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"part_title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"buckets\":"
		out.RawString(prefix)
		if in.Buckets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Buckets {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					easyjson6ff3ac1dEncodeSkillForceInternalModelsDto19(out, *v30)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto19(in *jlexer.Lexer, out *dto.LessonBucketDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bucket_id":
			out.Id = int(in.Int())
		case "bucket_title":
			out.Title = string(in.String())
		case "lessons":
			if in.IsNull() {
				in.Skip()
				out.Lessons = nil
			} else {
				in.Delim('[')
				if out.Lessons == nil {
					if !in.IsDelim(']') {
						out.Lessons = make([]*dto.LessonPointDTO, 0, 8)
					} else {
						out.Lessons = []*dto.LessonPointDTO{}
					}
				} else {
					out.Lessons = (out.Lessons)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *dto.LessonPointDTO
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(dto.LessonPointDTO)
						}
						easyjson6ff3ac1dDecodeSkillForceInternalModelsDto20(in, v31)
					}
					out.Lessons = append(out.Lessons, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto19(out *jwriter.Writer, in dto.LessonBucketDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bucket_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"bucket_title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"lessons\":"
		out.RawString(prefix)
		if in.Lessons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Lessons {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjson6ff3ac1dEncodeSkillForceInternalModelsDto20(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto20(in *jlexer.Lexer, out *dto.LessonPointDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lesson_id":
			out.LessonId = int(in.Int())
		case "lesson_type":
			out.Type = string(in.String())
		case "lesson_title":
			out.Title = string(in.String())
		case "lesson_value":
			out.Value = string(in.String())
		case "is_done":
			out.IsDone = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto20(out *jwriter.Writer, in dto.LessonPointDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lesson_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LessonId))
	}
	{
		const prefix string = ",\"lesson_type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"lesson_title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"lesson_value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"is_done\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDone))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse14(in *jlexer.Lexer, out *CourseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "course":
			if in.IsNull() {
				in.Skip()
				out.Course = nil
			} else {
				if out.Course == nil {
					out.Course = new(dto.CourseDTO)
				}
				easyjson6ff3ac1dDecodeSkillForceInternalModelsDto21(in, out.Course)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse14(out *jwriter.Writer, in CourseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"course\":"
		out.RawString(prefix[1:])
		if in.Course == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeSkillForceInternalModelsDto21(out, *in.Course)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CourseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CourseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CourseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CourseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse14(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalModelsDto21(in *jlexer.Lexer, out *dto.CourseDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "price":
			out.Price = int(in.Int())
		case "purchases_amount":
			out.PurchasesAmount = int(in.Int())
		case "creator_id":
			out.CreatorId = int(in.Int())
		case "time_to_pass":
			out.TimeToPass = int(in.Int())
		case "rating":
			out.Rating = float32(in.Float32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Tags = append(out.Tags, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "src_image":
			out.ScrImage = string(in.String())
		case "is_purchased":
			out.IsPurchased = bool(in.Bool())
		case "is_completed":
			out.IsCompleted = bool(in.Bool())
		case "parts":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]*dto.CoursePartDTO, 0, 8)
					} else {
						out.Parts = []*dto.CoursePartDTO{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *dto.CoursePartDTO
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(dto.CoursePartDTO)
						}
						easyjson6ff3ac1dDecodeSkillForceInternalModelsDto18(in, v35)
					}
					out.Parts = append(out.Parts, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_favorite":
			out.IsFavorite = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalModelsDto21(out *jwriter.Writer, in dto.CourseDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"purchases_amount\":"
		out.RawString(prefix)
		out.Int(int(in.PurchasesAmount))
	}
	{
		const prefix string = ",\"creator_id\":"
		out.RawString(prefix)
		out.Int(int(in.CreatorId))
	}
	{
		const prefix string = ",\"time_to_pass\":"
		out.RawString(prefix)
		out.Int(int(in.TimeToPass))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Tags {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"src_image\":"
		out.RawString(prefix)
		out.String(string(in.ScrImage))
	}
	{
		const prefix string = ",\"is_purchased\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPurchased))
	}
	{
		const prefix string = ",\"is_completed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCompleted))
	}
	{
		const prefix string = ",\"parts\":"
		out.RawString(prefix)
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Parts {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					easyjson6ff3ac1dEncodeSkillForceInternalModelsDto18(out, *v39)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFavorite))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse15(in *jlexer.Lexer, out *BucketCoursesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bucket_courses":
			if in.IsNull() {
				in.Skip()
				out.BucketCourses = nil
			} else {
				in.Delim('[')
				if out.BucketCourses == nil {
					if !in.IsDelim(']') {
						out.BucketCourses = make([]*dto.CourseDTO, 0, 8)
					} else {
						out.BucketCourses = []*dto.CourseDTO{}
					}
				} else {
					out.BucketCourses = (out.BucketCourses)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *dto.CourseDTO
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(dto.CourseDTO)
						}
						easyjson6ff3ac1dDecodeSkillForceInternalModelsDto21(in, v40)
					}
					out.BucketCourses = append(out.BucketCourses, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse15(out *jwriter.Writer, in BucketCoursesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bucket_courses\":"
		out.RawString(prefix[1:])
		if in.BucketCourses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.BucketCourses {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					easyjson6ff3ac1dEncodeSkillForceInternalModelsDto21(out, *v42)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BucketCoursesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BucketCoursesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BucketCoursesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BucketCoursesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse15(l, v)
}
func easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse16(in *jlexer.Lexer, out *Billing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "continue_url":
			out.Continue_url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse16(out *jwriter.Writer, in Billing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"continue_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Continue_url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Billing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Billing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeSkillForceInternalDeliveryHttpResponse16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Billing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Billing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeSkillForceInternalDeliveryHttpResponse16(l, v)
}
