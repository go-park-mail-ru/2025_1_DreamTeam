// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/AnswerQuiz": {
            "post": {
                "description": "Processes user's answer to a quiz question and returns the result",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Submit quiz answer",
                "parameters": [
                    {
                        "description": "User's quiz answer",
                        "name": "answer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Answer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result of the quiz answer (true/false)",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/GetTestLesson": {
            "get": {
                "description": "Retrieves test lesson information including questions and answers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Get test lesson details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lesson ID to retrieve test for",
                        "name": "lessonId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test lesson details including question and answers",
                        "schema": {
                            "$ref": "#/definitions/dto.Test"
                        }
                    },
                    "400": {
                        "description": "Invalid lesson ID format",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lesson not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/addCourseToFavourites": {
            "post": {
                "description": "Adds a course to the authenticated user's favorites list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Add course to user's favorites",
                "parameters": [
                    {
                        "description": "Course data to add to favorites",
                        "name": "course",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CourseDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "user not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/answerQuestion": {
            "post": {
                "description": "Processes and stores a user's answer to a specific test question",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Submit answer to a question",
                "parameters": [
                    {
                        "description": "User's answer to the question",
                        "name": "answer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AnswerQuestion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/deleteCourseFromFavourites": {
            "post": {
                "description": "Removes a course from the authenticated user's favorites list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Remove course from favorites",
                "parameters": [
                    {
                        "description": "Course data to remove from favorites",
                        "name": "course",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CourseDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "user not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/deleteProfilePhoto": {
            "post": {
                "description": "Deletes the profile photo of the authorized user and sets the default avatar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user` + "`" + `s profile photo",
                "parameters": [
                    {
                        "description": "Updated user profile",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usermodels.UserProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/getCourseLesson": {
            "get": {
                "description": "Returns the lesson the user should take in the course",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Get lesson of a course for the user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "next lesson of the course",
                        "schema": {
                            "$ref": "#/definitions/response.LessonResponse"
                        }
                    },
                    "400": {
                        "description": "invalid course ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/getCourseRoadmap": {
            "get": {
                "description": "Returns the roadmap of a course for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Get course roadmap",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Course roadmap",
                        "schema": {
                            "$ref": "#/definitions/response.CourseRoadmapResponse"
                        }
                    },
                    "400": {
                        "description": "invalid course ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/getCourses": {
            "get": {
                "description": "Retrieves a course by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Get course",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "course",
                        "schema": {
                            "$ref": "#/definitions/response.CourseResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/getFavouriteCourses": {
            "get": {
                "description": "Retrieves all courses marked as favorite by the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Get user's favorite courses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/getNextLesson": {
            "get": {
                "description": "Returns the next lesson the user should take based on current lesson and course",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Get next lesson in a course",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Course ID",
                        "name": "courseId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Current Lesson ID",
                        "name": "lessonId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "next lesson content",
                        "schema": {
                            "$ref": "#/definitions/response.LessonResponse"
                        }
                    },
                    "400": {
                        "description": "invalid course or lesson ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/getQuestionTestLesson": {
            "get": {
                "description": "Retrieves a test question and user's previous answer (if exists) for a specific lesson",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Get test question for lesson",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lesson ID to retrieve test question for",
                        "name": "lessonId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test question details including user's previous answer status",
                        "schema": {
                            "$ref": "#/definitions/dto.QuestionTest"
                        }
                    },
                    "400": {
                        "description": "Invalid lesson ID format",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lesson not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/isAuthorized": {
            "get": {
                "description": "Returns user profile if authorized",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Check if user is authorized",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/response.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "Login user with the given email, password and send cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request | password too short | invalid email",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "email or password incorrect",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "description": "Logout user by deleting session cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/markLessonAsCompleted": {
            "post": {
                "description": "Marks the specified lesson as not completed for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Mark a lesson as not completed",
                "parameters": [
                    {
                        "description": "Lesson ID",
                        "name": "lessonId",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LessonIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "ivalid lesson ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/markLessonAsNotCompleted": {
            "post": {
                "description": "Marks the specified lesson as not completed for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Mark a lesson as not completed",
                "parameters": [
                    {
                        "description": "Lesson ID",
                        "name": "lessonId",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LessonIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "ivalid lesson ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "Register a new user with the given name, email, and password and send cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usermodels.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request | missing required fields | password too short | invalid email",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "email exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/searchCourses": {
            "get": {
                "description": "Retrieves a list of available courses by title",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "courses"
                ],
                "summary": "Search courses by title",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Keywords to search courses",
                        "name": "keywords",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of courses",
                        "schema": {
                            "$ref": "#/definitions/response.BucketCoursesResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/serveVideo": {
            "get": {
                "description": "Streams video content for a lesson based on the lesson ID provided in the query parameters.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "video/mp4"
                ],
                "tags": [
                    "videos"
                ],
                "summary": "Serve video content",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lesson ID",
                        "name": "lesson_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "206": {
                        "description": "Partial Content",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid lesson ID parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Video not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/updateProfile": {
            "post": {
                "description": "Updates the profile photo of the authorized user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user profile photo",
                "parameters": [
                    {
                        "description": "Updated user profile",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usermodels.UserProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "not authorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/validEmail": {
            "get": {
                "description": "Confirm user email using the token from the registration email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Confirm user email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token from registration email",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "email exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Answer": {
            "type": "object",
            "properties": {
                "answer_id": {
                    "type": "integer"
                },
                "course_id": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "integer"
                }
            }
        },
        "dto.AnswerQuestion": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "question_id": {
                    "type": "integer"
                }
            }
        },
        "dto.CourseDTO": {
            "type": "object",
            "properties": {
                "creator_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_favorite": {
                    "type": "boolean"
                },
                "is_purchased": {
                    "type": "boolean"
                },
                "parts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CoursePartDTO"
                    }
                },
                "price": {
                    "type": "integer"
                },
                "purchases_amount": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number"
                },
                "src_image": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "time_to_pass": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.CoursePartDTO": {
            "type": "object",
            "properties": {
                "buckets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.LessonBucketDTO"
                    }
                },
                "part_id": {
                    "type": "integer"
                },
                "part_title": {
                    "type": "string"
                }
            }
        },
        "dto.CourseRoadmapDTO": {
            "type": "object",
            "properties": {
                "parts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CoursePartDTO"
                    }
                }
            }
        },
        "dto.LessonBucketDTO": {
            "type": "object",
            "properties": {
                "bucket_id": {
                    "type": "integer"
                },
                "bucket_title": {
                    "type": "string"
                },
                "lessons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.LessonPointDTO"
                    }
                }
            }
        },
        "dto.LessonDTO": {
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/dto.LessonDtoHeader"
                },
                "lesson_body": {
                    "$ref": "#/definitions/dto.LessonDtoBody"
                }
            }
        },
        "dto.LessonDtoBody": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "body": {
                                "type": "string"
                            }
                        }
                    }
                },
                "footer": {
                    "type": "object",
                    "properties": {
                        "current_lesson_id": {
                            "type": "integer"
                        },
                        "next_lesson_id": {
                            "type": "integer"
                        },
                        "previous_lesson_id": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "dto.LessonDtoHeader": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "object",
                    "properties": {
                        "order": {
                            "type": "integer"
                        },
                        "title": {
                            "type": "string"
                        }
                    }
                },
                "course_id": {
                    "type": "integer"
                },
                "course_title": {
                    "type": "string"
                },
                "part": {
                    "type": "object",
                    "properties": {
                        "order": {
                            "type": "integer"
                        },
                        "title": {
                            "type": "string"
                        }
                    }
                },
                "points": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "is_done": {
                                "type": "boolean"
                            },
                            "lesson_id": {
                                "type": "integer"
                            },
                            "type": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "dto.LessonIDRequest": {
            "type": "object",
            "properties": {
                "lesson_id": {
                    "type": "integer"
                }
            }
        },
        "dto.LessonPointDTO": {
            "type": "object",
            "properties": {
                "is_done": {
                    "type": "boolean"
                },
                "lesson_id": {
                    "type": "integer"
                },
                "lesson_title": {
                    "type": "string"
                },
                "lesson_type": {
                    "type": "string"
                },
                "lesson_value": {
                    "type": "string"
                }
            }
        },
        "dto.QuestionTest": {
            "type": "object",
            "properties": {
                "question": {
                    "type": "string"
                },
                "question_id": {
                    "type": "integer"
                },
                "user_answer": {
                    "$ref": "#/definitions/dto.UserQuestionAnswer"
                }
            }
        },
        "dto.QuizAnswer": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "answer_id": {
                    "type": "integer"
                },
                "is_right": {
                    "type": "boolean"
                }
            }
        },
        "dto.Test": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.QuizAnswer"
                    }
                },
                "question": {
                    "type": "string"
                },
                "question_id": {
                    "type": "integer"
                },
                "user_answer": {
                    "$ref": "#/definitions/dto.UserAnswer"
                }
            }
        },
        "dto.UserAnswer": {
            "type": "object",
            "properties": {
                "answer_id": {
                    "type": "integer"
                },
                "is_right": {
                    "type": "boolean"
                },
                "question_id": {
                    "type": "integer"
                }
            }
        },
        "dto.UserDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UserProfileDTO": {
            "type": "object",
            "properties": {
                "avatar_src": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "hide_email": {
                    "type": "boolean"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UserQuestionAnswer": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "response.BucketCoursesResponse": {
            "type": "object",
            "properties": {
                "bucket_courses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CourseDTO"
                    }
                }
            }
        },
        "response.CourseResponse": {
            "type": "object",
            "properties": {
                "course": {
                    "$ref": "#/definitions/dto.CourseDTO"
                }
            }
        },
        "response.CourseRoadmapResponse": {
            "type": "object",
            "properties": {
                "course_roadmap": {
                    "$ref": "#/definitions/dto.CourseRoadmapDTO"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.LessonResponse": {
            "type": "object",
            "properties": {
                "lesson": {
                    "$ref": "#/definitions/dto.LessonDTO"
                }
            }
        },
        "response.UserProfileResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/dto.UserProfileDTO"
                }
            }
        },
        "usermodels.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "hideEmail": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "salt": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "usermodels.UserProfile": {
            "type": "object",
            "properties": {
                "avatarSrc": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "hideEmail": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "isAdmin": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
