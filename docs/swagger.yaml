definitions:
  dto.CourseDTO:
    properties:
      creator_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      price:
        type: integer
      purchases_amount:
        type: integer
      rating:
        type: number
      src_image:
        type: string
      tags:
        items:
          type: string
        type: array
      time_to_pass:
        type: integer
      title:
        type: string
    type: object
  dto.CoursePartDTO:
    properties:
      buckets:
        items:
          $ref: '#/definitions/dto.LessonBucketDTO'
        type: array
      part_id:
        type: integer
      part_title:
        type: string
    type: object
  dto.CourseRoadmapDTO:
    properties:
      parts:
        items:
          $ref: '#/definitions/dto.CoursePartDTO'
        type: array
    type: object
  dto.LessonBucketDTO:
    properties:
      bucket_id:
        type: integer
      bucket_title:
        type: string
      lessons:
        items:
          $ref: '#/definitions/dto.LessonPointDTO'
        type: array
    type: object
  dto.LessonDTO:
    properties:
      header:
        $ref: '#/definitions/dto.LessonDtoHeader'
      lesson_body:
        $ref: '#/definitions/dto.LessonDtoBody'
    type: object
  dto.LessonDtoBody:
    properties:
      blocks:
        items:
          properties:
            body:
              type: string
          type: object
        type: array
      footer:
        properties:
          next_lesson_id:
            type: integer
          previous_lesson_id:
            type: integer
        type: object
    type: object
  dto.LessonDtoHeader:
    properties:
      bucket:
        properties:
          order:
            type: integer
          title:
            type: string
        type: object
      course_id:
        type: integer
      course_title:
        type: string
      part:
        properties:
          order:
            type: integer
          title:
            type: string
        type: object
      points:
        items:
          properties:
            is_done:
              type: boolean
            lesson_id:
              type: integer
            type:
              type: string
          type: object
        type: array
    type: object
  dto.LessonIDRequest:
    properties:
      lesson_id:
        type: integer
    type: object
  dto.LessonPointDTO:
    properties:
      is_done:
        type: boolean
      lesson_id:
        type: integer
      lesson_title:
        type: string
      lesson_type:
        type: string
    type: object
  dto.UserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UserProfileDTO:
    properties:
      avatar_src:
        type: string
      bio:
        type: string
      email:
        type: string
      hide_email:
        type: boolean
      name:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      salt:
        items:
          type: integer
        type: array
    type: object
  models.UserProfile:
    properties:
      avatarSrc:
        type: string
      bio:
        type: string
      email:
        type: string
      hideEmail:
        type: boolean
      id:
        type: integer
      name:
        type: string
    type: object
  response.BucketCoursesResponse:
    properties:
      bucket_courses:
        items:
          $ref: '#/definitions/dto.CourseDTO'
        type: array
    type: object
  response.CourseRoadmapResponse:
    properties:
      course_roadmap:
        $ref: '#/definitions/dto.CourseRoadmapDTO'
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  response.LessonBodyResponse:
    properties:
      lesson_body:
        $ref: '#/definitions/dto.LessonDtoBody'
    type: object
  response.LessonResponse:
    properties:
      lesson:
        $ref: '#/definitions/dto.LessonDTO'
    type: object
  response.UserProfileResponse:
    properties:
      user:
        $ref: '#/definitions/dto.UserProfileDTO'
    type: object
info:
  contact: {}
paths:
  /api/getCourseLesson:
    get:
      consumes:
      - application/json
      description: Returns the lesson the user should take in the course
      parameters:
      - description: Course ID
        in: query
        name: courseId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: next lesson of the course
          schema:
            $ref: '#/definitions/response.LessonResponse'
        "400":
          description: invalid course ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "405":
          description: method not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get lesson of a course for the user
      tags:
      - courses
  /api/getCourseRoadmap:
    get:
      consumes:
      - application/json
      description: Returns the roadmap of a course for the authenticated user
      parameters:
      - description: Course ID
        in: query
        name: courseId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Course roadmap
          schema:
            $ref: '#/definitions/response.CourseRoadmapResponse'
        "400":
          description: invalid course ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "405":
          description: method not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get course roadmap
      tags:
      - courses
  /api/getCourses:
    get:
      consumes:
      - application/json
      description: Retrieves a list of available courses
      produces:
      - application/json
      responses:
        "200":
          description: List of courses
          schema:
            $ref: '#/definitions/response.BucketCoursesResponse'
        "405":
          description: method not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get list of courses
      tags:
      - courses
  /api/getNextLesson:
    get:
      consumes:
      - application/json
      description: Returns the next lesson the user should take based on current lesson
        and course
      parameters:
      - description: Course ID
        in: query
        name: courseId
        required: true
        type: integer
      - description: Current Lesson ID
        in: query
        name: lessonId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: next lesson content
          schema:
            $ref: '#/definitions/response.LessonBodyResponse'
        "400":
          description: invalid course or lesson ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "405":
          description: method not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get next lesson in a course
      tags:
      - courses
  /api/isAuthorized:
    get:
      consumes:
      - application/json
      description: Returns user profile if authorized
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/response.UserProfileResponse'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Check if user is authorized
      tags:
      - users
  /api/login:
    post:
      consumes:
      - application/json
      description: Login user with the given email, password and send cookie
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
        "400":
          description: invalid request | password too short | invalid email
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: email or password incorrect
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "405":
          description: method not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login user
      tags:
      - users
  /api/logout:
    post:
      consumes:
      - application/json
      description: Logout user by deleting session cookie
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
        "500":
          description: server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Logout user
      tags:
      - users
  /api/markLessonAsNotCompleted:
    post:
      consumes:
      - application/json
      description: Marks the specified lesson as not completed for the authenticated
        user
      parameters:
      - description: Lesson ID
        in: body
        name: lessonId
        required: true
        schema:
          $ref: '#/definitions/dto.LessonIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: ivalid lesson ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "405":
          description: uethod not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Mark a lesson as not completed
      tags:
      - courses
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the given name, email, and password and
        send cookie
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
        "400":
          description: invalid request | missing required fields | password too short
            | invalid email
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: email exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "405":
          description: method not allowed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /api/updateProfile:
    post:
      consumes:
      - application/json
      description: Updates the profile photo of the authorized user
      parameters:
      - description: Updated user profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UserProfile'
      produces:
      - application/json
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: not authorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update user profile photo
      tags:
      - users
swagger: "2.0"
