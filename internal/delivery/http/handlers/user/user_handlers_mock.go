// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/http/handlers/user/user_handlers.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	multipart "mime/multipart"
	http "net/http"
	reflect "reflect"
	usermodels "skillForce/internal/models/user"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecaseInterface is a mock of UserUsecaseInterface interface.
type MockUserUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseInterfaceMockRecorder
}

// MockUserUsecaseInterfaceMockRecorder is the mock recorder for MockUserUsecaseInterface.
type MockUserUsecaseInterfaceMockRecorder struct {
	mock *MockUserUsecaseInterface
}

// NewMockUserUsecaseInterface creates a new mock instance.
func NewMockUserUsecaseInterface(ctrl *gomock.Controller) *MockUserUsecaseInterface {
	mock := &MockUserUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecaseInterface) EXPECT() *MockUserUsecaseInterfaceMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockUserUsecaseInterface) AuthenticateUser(ctx context.Context, user *usermodels.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockUserUsecaseInterfaceMockRecorder) AuthenticateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockUserUsecaseInterface)(nil).AuthenticateUser), ctx, user)
}

// DeleteProfilePhoto mocks base method.
func (m *MockUserUsecaseInterface) DeleteProfilePhoto(ctx context.Context, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfilePhoto", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfilePhoto indicates an expected call of DeleteProfilePhoto.
func (mr *MockUserUsecaseInterfaceMockRecorder) DeleteProfilePhoto(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfilePhoto", reflect.TypeOf((*MockUserUsecaseInterface)(nil).DeleteProfilePhoto), ctx, userId)
}

// GetUserByCookie mocks base method.
func (m *MockUserUsecaseInterface) GetUserByCookie(ctx context.Context, cookieValue string) (*usermodels.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCookie", ctx, cookieValue)
	ret0, _ := ret[0].(*usermodels.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCookie indicates an expected call of GetUserByCookie.
func (mr *MockUserUsecaseInterfaceMockRecorder) GetUserByCookie(ctx, cookieValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCookie", reflect.TypeOf((*MockUserUsecaseInterface)(nil).GetUserByCookie), ctx, cookieValue)
}

// LogoutUser mocks base method.
func (m *MockUserUsecaseInterface) LogoutUser(ctx context.Context, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockUserUsecaseInterfaceMockRecorder) LogoutUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockUserUsecaseInterface)(nil).LogoutUser), ctx, userId)
}

// RegisterUser mocks base method.
func (m *MockUserUsecaseInterface) RegisterUser(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserUsecaseInterfaceMockRecorder) RegisterUser(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserUsecaseInterface)(nil).RegisterUser), ctx, token)
}

// SaveProfilePhoto mocks base method.
func (m *MockUserUsecaseInterface) SaveProfilePhoto(ctx context.Context, url string, userId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfilePhoto", ctx, url, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProfilePhoto indicates an expected call of SaveProfilePhoto.
func (mr *MockUserUsecaseInterfaceMockRecorder) SaveProfilePhoto(ctx, url, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfilePhoto", reflect.TypeOf((*MockUserUsecaseInterface)(nil).SaveProfilePhoto), ctx, url, userId)
}

// UpdateProfile mocks base method.
func (m *MockUserUsecaseInterface) UpdateProfile(ctx context.Context, userId int, userProfile *usermodels.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userId, userProfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserUsecaseInterfaceMockRecorder) UpdateProfile(ctx, userId, userProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserUsecaseInterface)(nil).UpdateProfile), ctx, userId, userProfile)
}

// UploadFile mocks base method.
func (m *MockUserUsecaseInterface) UploadFile(ctx context.Context, file multipart.File, fileHeader *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file, fileHeader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockUserUsecaseInterfaceMockRecorder) UploadFile(ctx, file, fileHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockUserUsecaseInterface)(nil).UploadFile), ctx, file, fileHeader)
}

// ValidUser mocks base method.
func (m *MockUserUsecaseInterface) ValidUser(ctx context.Context, user *usermodels.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidUser indicates an expected call of ValidUser.
func (mr *MockUserUsecaseInterfaceMockRecorder) ValidUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidUser", reflect.TypeOf((*MockUserUsecaseInterface)(nil).ValidUser), ctx, user)
}

// MockCookieManagerInterface is a mock of CookieManagerInterface interface.
type MockCookieManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCookieManagerInterfaceMockRecorder
}

// MockCookieManagerInterfaceMockRecorder is the mock recorder for MockCookieManagerInterface.
type MockCookieManagerInterfaceMockRecorder struct {
	mock *MockCookieManagerInterface
}

// NewMockCookieManagerInterface creates a new mock instance.
func NewMockCookieManagerInterface(ctrl *gomock.Controller) *MockCookieManagerInterface {
	mock := &MockCookieManagerInterface{ctrl: ctrl}
	mock.recorder = &MockCookieManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieManagerInterface) EXPECT() *MockCookieManagerInterfaceMockRecorder {
	return m.recorder
}

// CheckCookie mocks base method.
func (m *MockCookieManagerInterface) CheckCookie(r *http.Request) *usermodels.UserProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCookie", r)
	ret0, _ := ret[0].(*usermodels.UserProfile)
	return ret0
}

// CheckCookie indicates an expected call of CheckCookie.
func (mr *MockCookieManagerInterfaceMockRecorder) CheckCookie(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockCookieManagerInterface)(nil).CheckCookie), r)
}

// DeleteCookie mocks base method.
func (m *MockCookieManagerInterface) DeleteCookie(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCookie", w)
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockCookieManagerInterfaceMockRecorder) DeleteCookie(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockCookieManagerInterface)(nil).DeleteCookie), w)
}

// SetCookie mocks base method.
func (m *MockCookieManagerInterface) SetCookie(w http.ResponseWriter, cookieValue string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookie", w, cookieValue)
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockCookieManagerInterfaceMockRecorder) SetCookie(w, cookieValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockCookieManagerInterface)(nil).SetCookie), w, cookieValue)
}
