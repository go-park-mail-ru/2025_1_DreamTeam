// Code generated by MockGen. DO NOT EDIT.
// Source: course_handlers.go

// Package mocks is a generated GoMock package.
package handlers

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"
	dto "skillForce/internal/models/dto"
	user "skillForce/internal/models/user"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseUsecaseInterface is a mock of CourseUsecaseInterface interface.
type MockCourseUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCourseUsecaseInterfaceMockRecorder
}

// MockCourseUsecaseInterfaceMockRecorder is the mock recorder for MockCourseUsecaseInterface.
type MockCourseUsecaseInterfaceMockRecorder struct {
	mock *MockCourseUsecaseInterface
}

// NewMockCourseUsecaseInterface creates a new mock instance.
func NewMockCourseUsecaseInterface(ctrl *gomock.Controller) *MockCourseUsecaseInterface {
	mock := &MockCourseUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockCourseUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseUsecaseInterface) EXPECT() *MockCourseUsecaseInterfaceMockRecorder {
	return m.recorder
}

// GetBucketCourses mocks base method.
func (m *MockCourseUsecaseInterface) GetBucketCourses(ctx context.Context) ([]*dto.CourseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketCourses", ctx)
	ret0, _ := ret[0].([]*dto.CourseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketCourses indicates an expected call of GetBucketCourses.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetBucketCourses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketCourses", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetBucketCourses), ctx)
}

// GetCourse mocks base method.
func (m *MockCourseUsecaseInterface) GetCourse(ctx context.Context, courseId int, userProfile *user.UserProfile) (*dto.CourseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourse", ctx, courseId, userProfile)
	ret0, _ := ret[0].(*dto.CourseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourse indicates an expected call of GetCourse.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetCourse(ctx, courseId, userProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourse", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetCourse), ctx, courseId, userProfile)
}

// GetCourseLesson mocks base method.
func (m *MockCourseUsecaseInterface) GetCourseLesson(ctx context.Context, userId, courseId int) (*dto.LessonDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseLesson", ctx, userId, courseId)
	ret0, _ := ret[0].(*dto.LessonDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseLesson indicates an expected call of GetCourseLesson.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetCourseLesson(ctx, userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseLesson", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetCourseLesson), ctx, userId, courseId)
}

// GetCourseRoadmap mocks base method.
func (m *MockCourseUsecaseInterface) GetCourseRoadmap(ctx context.Context, userId, courseId int) (*dto.CourseRoadmapDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseRoadmap", ctx, userId, courseId)
	ret0, _ := ret[0].(*dto.CourseRoadmapDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseRoadmap indicates an expected call of GetCourseRoadmap.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetCourseRoadmap(ctx, userId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseRoadmap", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetCourseRoadmap), ctx, userId, courseId)
}

// GetFragment mocks base method.
func (m *MockCourseUsecaseInterface) GetFragment(ctx context.Context, name string, start, end int64) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFragment", ctx, name, start, end)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFragment indicates an expected call of GetFragment.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetFragment(ctx, name, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFragment", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetFragment), ctx, name, start, end)
}

// GetMeta mocks base method.
func (m *MockCourseUsecaseInterface) GetMeta(ctx context.Context, name string) (dto.VideoMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", ctx, name)
	ret0, _ := ret[0].(dto.VideoMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetMeta(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetMeta), ctx, name)
}

// GetNextLesson mocks base method.
func (m *MockCourseUsecaseInterface) GetNextLesson(ctx context.Context, userId, cousreId, lessonId int) (*dto.LessonDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextLesson", ctx, userId, cousreId, lessonId)
	ret0, _ := ret[0].(*dto.LessonDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextLesson indicates an expected call of GetNextLesson.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetNextLesson(ctx, userId, cousreId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextLesson", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetNextLesson), ctx, userId, cousreId, lessonId)
}

// GetVideoUrl mocks base method.
func (m *MockCourseUsecaseInterface) GetVideoUrl(ctx context.Context, lesson_id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoUrl", ctx, lesson_id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoUrl indicates an expected call of GetVideoUrl.
func (mr *MockCourseUsecaseInterfaceMockRecorder) GetVideoUrl(ctx, lesson_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoUrl", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).GetVideoUrl), ctx, lesson_id)
}

// MarkLessonAsNotCompleted mocks base method.
func (m *MockCourseUsecaseInterface) MarkLessonAsNotCompleted(ctx context.Context, userId, lessonId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkLessonAsNotCompleted", ctx, userId, lessonId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkLessonAsNotCompleted indicates an expected call of MarkLessonAsNotCompleted.
func (mr *MockCourseUsecaseInterfaceMockRecorder) MarkLessonAsNotCompleted(ctx, userId, lessonId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkLessonAsNotCompleted", reflect.TypeOf((*MockCourseUsecaseInterface)(nil).MarkLessonAsNotCompleted), ctx, userId, lessonId)
}

// MockCookieManagerInterface is a mock of CookieManagerInterface interface.
type MockCookieManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCookieManagerInterfaceMockRecorder
}

// MockCookieManagerInterfaceMockRecorder is the mock recorder for MockCookieManagerInterface.
type MockCookieManagerInterfaceMockRecorder struct {
	mock *MockCookieManagerInterface
}

// NewMockCookieManagerInterface creates a new mock instance.
func NewMockCookieManagerInterface(ctrl *gomock.Controller) *MockCookieManagerInterface {
	mock := &MockCookieManagerInterface{ctrl: ctrl}
	mock.recorder = &MockCookieManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieManagerInterface) EXPECT() *MockCookieManagerInterfaceMockRecorder {
	return m.recorder
}

// CheckCookie mocks base method.
func (m *MockCookieManagerInterface) CheckCookie(r *http.Request) *user.UserProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCookie", r)
	ret0, _ := ret[0].(*user.UserProfile)
	return ret0
}

// CheckCookie indicates an expected call of CheckCookie.
func (mr *MockCookieManagerInterfaceMockRecorder) CheckCookie(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockCookieManagerInterface)(nil).CheckCookie), r)
}
